{"00_Inbox/해야할-일":{"title":"해야할 일","links":["tags/tasks"],"tags":["todo","tasks"],"content":"\n #tasks git push 처리 ⏫ ✅ 2023-09-20\n #tasks github.io 로 퍼블리싱 ⏫\n[ ]\n"},"01_DailyNote/202309/2023-09-16":{"title":"2023-09-16","links":["99_Resource/02_랜덤질문/마지막으로-한-거짓말은"],"tags":["dailynote","2023년","9월"],"content":"\n랜덤질문 §\n마지막으로 한 거짓말은\n메모 §\n\nobsidian 제대로 써보기로 마음 먹음\n필요한 플러그인 검색/설치\nmacbook, iPad, android Phone 에 obsidian 설치\ngit 연동까지 완료\n\n할 일 §\n\n 옵시디언 셋팅\n"},"01_DailyNote/202309/2023-09-17":{"title":"2023-09-17","links":["99_Resource/02_랜덤질문/왜-사람을-죽이면-안되나","99_Resource/02_랜덤질문/어디를-가든-항상-가지고-다니는-한-가지"],"tags":["dailynote","2023년","9월"],"content":"\n랜덤질문 §\n왜 사람을 죽이면 안되나\n어디를 가든 항상 가지고 다니는 한 가지\n메모 §\n\n네이버 옵시디언 사용자모임 카페 가입\n어머니가 간밤에 체하셔서 하루종일 누워계심 (집에 방문해 계시는 중)\n\n할 일 §\n\n 유리 자전거 타이어 교환 ✅ 2023-09-17\n 영흥공원 방문\n 랜덤질문 템플릿 만들기 ✅ 2023-09-17\n"},"01_DailyNote/202309/2023-09-18":{"title":"2023-09-18","links":["99_Resource/02_랜덤질문/내가-추천하는-사람이-대통령이-된다면,-누구이며-그-이유는"],"tags":["dailynote","2023년","9월"],"content":"\n랜덤질문 §\n내가 추천하는 사람이 대통령이 된다면, 누구이며 그 이유는\n메모 §\n\n계속되는 지하철 승무원 파업으로 출퇴근길이 고됨\n\n720-1 버스타고 퇴근\n\n\n\n할 일 §\n\n 랜덤질문 정리\n"},"01_DailyNote/202309/2023-09-19":{"title":"2023-09-19","links":["99_Resource/02_랜덤질문/마지막-외식장소와-음식은"],"tags":["dailynote","2023년","9월"],"content":"\n랜덤질문 §\n\n마지막 외식장소와 음식은\n메모 §\n\n익숙해지기 4일차. 다양한 플러그인으로 이것저것 시도가 많아짐 ^^;\n\n할 일 §"},"01_DailyNote/202309/2023-09-20":{"title":"2023-09-20","links":["99_Resource/02_랜덤질문/가장-싫어하는-음식은"],"tags":["dailynote","2023년","9월"],"content":"\n랜덤질문 §\n가장 싫어하는 음식은\n메모 §\n\n게이밍 헤드셋 이어패드, 헤드패드 교체함\n\n할 일 §\n\n 랜덤질문 리스트 재처리\n git push 처리\n"},"01_DailyNote/202309/2023-09-21":{"title":"2023-09-21","links":["99_Resource/02_랜덤질문/최근-검색한-내용은"],"tags":["dailynote"],"content":"\n랜덤질문 §\n최근 검색한 내용은\n메모 §\n\n네이버 기획팀에게 명절선물받음. 쿠키.\n회식\n이재명대표 체포안 가결… 뭐 이런…\n\n\n할 일 §\n\n 할일 1\n 할일 2\n"},"01_DailyNote/202309/2023-09-22":{"title":"2023-09-22","links":["99_Resource/02_랜덤질문/투명인간이-된다면"],"tags":["dailynote","2023년","9월"],"content":"\n랜덤질문 §\n투명인간이 된다면\n메모 §\n\n민주당원 가입할까 엄청 고민함.\n이사님 휴가로… 직원들 가위바위보라 한명씩 퇴근시킴\n티스토리 블로그 카카오톡 메신저 연동\n\n할 일 §\n\n netlify.com publish\n github.io publish\n"},"01_DailyNote/202309/2023-09-23":{"title":"2023-09-23","links":["99_Resource/02_랜덤질문/최근-본-가장-아름다운-곳은"],"tags":["dailynote","2023년","9월"],"content":"\n랜덤질문 §\n최근 본 가장 아름다운 곳은\n메모 §\n\n서울에서 엄마 오심\n영통도서관에서 제텔카스텐, Pro Git 책 두권 빌려옴 (feat. Yuri)\n\n할 일 §\n\n 제텔카스텐 책 읽기\n"},"02_Life/00_Family/20230105-~-08-제주여행":{"title":"20230105 ~ 08 제주여행","links":["01_DailyNote/202309/2023-09-16","tags/clippings","tags/travle"],"tags":["clippings","travle"],"content":"author:: 마지막 수정:makaza\ndate :: 2023-01-02\nsource:: 20230105 ~ 08 제주여행\nclipped:: 2023-09-16\npublished::\n#clippings#travle\n기억저장소\n검색…\n\n\n\n\n/ sidebar.root\nLife\nTravel\n\n현재 디렉토리\n[\n20230105 ~ 08 제주여행\n](https://chayoung.kr/ko/Life/Travel/20230105)\n\n/\nLife-   /\nTravel-   /\n20230105\n\n\n20230105 ~ 08 제주여행\n3박4일간 제주도 가족여행\n\n페이지 내용\n제주도 여행\n태그\ntravel가족제주도\n이야기\n마지막 수정:\nmakaza\n2023-01-02\n\n일자 : 2023.01.05 ~ 01.08\n일정 및 정보 : 노션에서 확인\n\n댓글"},"02_Life/01_Enjoy/악마사냥꾼-셋팅-및-만렙-(29시즌)":{"title":"악마사냥꾼 셋팅 및 만렙 (29시즌)","links":[],"tags":["game","diablo","악마사냥꾼"],"content":"29시즌이 23.09.15 17:00 에 시작되었다. (콘솔은 23.09.16 오전)\n빠르게 만렙올리고 즐겨보자.\nYouTube link|fullwidth"},"03_Tip&Tech/00_Develop/TestCode":{"title":"TestCode","links":[],"tags":["develop","frontend"],"content":"\njest\ncypress\n\ne2e 테스트\n\n\n"},"03_Tip&Tech/00_Develop/node":{"title":"node","links":[],"tags":["develop"],"content":"Node 설치 §\n# Windows\nnpm install -g n\n\nn stable     // 안정 버전 설치  \nn latest     // 최신 버전 설치  \nn lts        // lts 버전 설치  \nn x.x.x      // 특정 버전 설치 ( x.x.x 버전 )  \n  \n// 이전 버전들 삭제해 주는 명령어  \nn prune\n\n\n# Mac\nbrew search node\n\n# nvm 설치\narch -arm64 brew install nvm\n\n\n참고링크 §\nhttps://aiday.tistory.com/63\nhttps://makepluscode.tistory.com/163\nhttps://clolee.tistory.com/53"},"03_Tip&Tech/01_Product/Dataview":{"title":"Dataview","links":["01_DailyNote/202309/2023-09-18","tags/clippings","tags/obsidian","tags/plugin"],"tags":["clippings","obsidian","plugin"],"content":"author:: null\nsource:: Dataview\nclipped:: 2023-09-18\npublished::\n#clippings#obsidian#plugin\nDataview is a live index and query engine over your personal knowledge base. You can add metadata to your notes and query them with the Dataview Query Language to list, filter, sort or group your data. Dataview keeps your queries always up to date and makes data aggregation a breeze.\nYou could\n\nTrack your sleep by recording it in daily notes, and automatically create weekly tables of your sleep schedule.\nAutomatically collect links to books in your notes, and render them all sorted by rating.\nAutomatically collect pages associated with today’s date and show them in your daily note.\nFind pages with no tags for follow-up, or show pretty views of specifically-tagged pages.\nCreate dynamic views which show upcoming birthdays or events recorded in your notes\n\nand many more things.\nDataview gives you a fast way to search, display and operate on indexed data in your vault!\nDataview is highly generic and high performance, scaling up to hundreds of thousands of annotated notes without issue.\nIf the built in query language is insufficient for your purpose, you can run arbitrary JavaScript against the dataview API and build whatever utility you might need yourself, right in your notes.\nDataview is about displaying, not editing\nDataview is meant for displaying and calculating data. It is not meant to edit your notes/metadata and will always leave them untouched (… except if you’re checking a Task through Dataview.)\nHow to Use Dataview §\nDataview consists of two big building blocks: Data Indexing and Data Querying.\nMore details on the linked documentation pages\nThe following sections should give you a general overview about what you can do with dataview and how. Be sure to visit the linked pages to find out more about the individual parts.\nData Indexing §\nDataview operates on metadata in your Markdown files. It cannot read everything in your vault, but only specific data. Some of your content, like tags and bullet points (including tasks), are available automatically in Dataview. You can add other data through fields, either on top of your file per YAML Frontmatter or in the middle of your content with Inline Fields via the [key:: value] syntax. Dataview indexes these data to make it available for you to query.\nDataview indexes certain information like tags and list items and the data you add via fields. Only indexed data is available in a Dataview query!\nFor example, a file might look like this:\n`---\nauthor: “Edgar Allan Poe”\npublished: 1845\ntags: poems §\nThe Raven §\nOnce upon a midnight dreary, while I pondered, weak and weary,\nOver many a quaint and curious volume of forgotten lore—`\nOr like this:\n`#poems\nThe Raven §\nFrom [author:: Edgar Allan Poe], written in (published:: 1845)\nOnce upon a midnight dreary, while I pondered, weak and weary,\nOver many a quaint and curious volume of forgotten lore—`\nIn terms of indexed metadata (or what you can query), they are identical, and only differ in their annotation style. How you want to annotate your metadata is up to you and your personal preference. With this file, you’d have the metadata field author available and everything Dataview provides you automatically as implicit fields, like the tag or note title.\nData needs to be indexed\nIn the above example, you do not have the poem itself available in Dataview: It is a paragraph, no metadata field and nothing Dataview indexes automatically. It is not part of Dataviews index, so you won’t be able to query it.\nData Querying §\nYou can access indexed data with the help of Queries.\nThere are three different ways you can write a Query: With help of the Dataview Query Language, as an inline statement or in the most flexible but most complex way: as a Javascript Query.\nThe Dataview Query Language (DQL) gives you a broad and powerful toolbelt to query, display and operate on your data. An inline query gives you the possibility to display exactly one indexed value anywhere in your note. You can also do calculations this way. With DQL at your hands, you’ll be probably fine without any Javascript through your data journey.\nA DQL Query consists of several parts:\n\nExactly one Query Type that determines what your Query Output looks like\nNone or one FROM statement to pick a specific tag or folder (or another source) to look at\nNone to multiple other Data Commands that help you filter, group and sort your wanted output\n\nFor example, a Query can look like this:\nwhich list all files in your vault.\nEverything but the Query Type is optional\nThe only thing you need for a valid DQL Query is the Query Type (and on CALENDARs, a date field.)\nA more restricted Query might look like this:\n```dataview LIST FROM #poems WHERE author = &quot;Edgar Allan Poe&quot; ```\nwhich lists all files in your vault that have the tag #poems and a field named author with the value Edgar Allan Poe. This query would find our example page from above.\nLIST is only one out of four Query Types you can use. For example, with a TABLE, we could add some more information to our output:\n```dataview TABLE author, published, file.inlinks AS &quot;Mentions&quot; FROM #poems ```\nThis’ll give you back a result like:\nThat’s not where the capabilities of dataview end, though. You can also operate on your data with help of functions. Mind that these operations are only made inside your query - your data in your files stays untouched.\n```dataview TABLE author, date(now).year - published AS &quot;Age in Yrs&quot;, length(file.inlinks) AS &quot;Counts of Mentions&quot; FROM #poems ```\ngives you back\nFind more examples here.\nAs you can see, dataview doesn’t only allow you to aggregate your data swiftly and always up to date, it also can help you with operations to give you new insights on your dataset. Browse through the documentation to find out more on how to interact with your data.\nHave fun exploring your vault in new ways!\nResources and Help §\nThis documentation is not the only place that can help you out on your data journey. Take a look at Resources and Support for a list of helpful pages and videos."},"03_Tip&Tech/01_Product/Obsidian-제대로-사용하기-프로젝트-2일차(LYT-framework-,-zettel)":{"title":"Obsidian 제대로 사용하기 프로젝트 2일차(LYT framework , zettel)","links":["01_DailyNote/202309/2023-09-17","tags/clippings","tags/제텔카스텐","tags/obsidian"],"tags":["clippings","제텔카스텐","obsidian"],"content":"author:: null\nsource:: Obsidian 제대로 사용하기 프로젝트 2일차(LYT framework , zettel)\nclipped:: 2023-09-17\npublished::\n#clippings#제텔카스텐#obsidian\n\nObsidian에 대한 정보가 생각보다 국내에 없어서 찾는데 오랜시간 걸리고 있다… 찾아도 100퍼센트 이해하는데 어려움이 있다.\n\n제텔카스텐 정보처 §\n\n국내\n\n제텔카스텐 연구소 노션으로 되어있는 제텔카스텐 연구소 페이지 (내가 생각할때 가장 핵심적인 정보들이 많았던 노션 페이지)\n나의 제텔카시텐 저자의 경험을 꼼꼼하게 작성한 글\n\n\n해외\n\n\nHow to take smart notes 저자의 자신만의 노트를 어떻게 만들었는지 보여준다.\n\n\n제텐카스텐 사용방법이미지로 설명해서 이해하기 어렵지 않다.\n\n\nDuffney의 깃허브\n\n\n10000 markdown file10,000여개의 제텔 노트가 있는 github repo!\n\n\nLYT 홈페이지 이곳에서 다양한 workshop도 하고 다양한 정보들을 제공해준다.\n\n\n\n\n노트의 방향성을 정하다 §\n\n\nLYT 홈페이지 를 참고해서 LYT에서 제공해주는 KIT를 다운로드 받아 나의 노트로 작성해보려고 한다.\n\n\n책을 통해 프로젝트(note-making project)의 당위성을 확보하다 §\n\n초연결자가 되라 세상을 바꾼 창의적인 사람들만이 가지고 있는 비밀\n성유진 저 | 라온북 | 2018년 03월 30일\n책을 읽은 후 나의 생각 👣 §\n내가 하려고 하는 제텔카르텐 방법론을 활용하여 note-making하기 프로젝트에 대한 **당위성**을 찾은 것 같다.\n변화하는 시대 속에서 우리는 방대한 지식들을 접하고 있으며 프로그래머가 될 나도 그 수 많은 지식 속에서 허우적 거릴 수 있다고 판단했다.\n그래서 나만의 digital garden이 필수적으로 필요하겠다고 생각했다. 나의 지식들을 관리하고 싶었고 이 지식들을 적재적소에 사용하고 싶었다. 이 책에서 주된 키워드는 연결이다.\n내가 하고자 하는 note-making의 핵심은 **&quot;연결&quot;**이다.\n\n기존의 note-taking은 top-bottom 방식으로 미리 카테고리를 만들고 그 안에서 주제를 선정하고 그 주제를 뒷받침할 근거를 찾아 노트를 작성했다. 한계가 너무 느껴졌다. 구조를 생각하고 그에 맞게 파일을 넣었는데.. 알고 보니 구조에 맞지 않을때가 많았고 그러다보니 점점 나의 노트는 더 이상 미래에 사용하기 어려워졌다.\n그 문제를 해결하기 위해 난 bottom-up 방식으로 노트를 만들고 싶었고 그러기 위해 찾은 방법론이 제텔카스텐이었다. 그 방법론을 사용할 수 있도록 가이드 해주는 사이트는 LYT 라는 것도 찾다보니 알게 됐다.\n그래서 지금 2일차에 진행하고 있는 것은 (LInking Your Thinking)웹사이트에 들어가서 LYT-KIT 를 다운로드 받아 소스 코드를 받아 분해하듯… LYT framework가 어떻게 작동하고 있고 어떻게 나의 노트에 적용할 수 있는지 깊이 공부하고 찾아보고 있다.\n\n결과적으로 창의적 사고를 하기 위해서는 **연결**을 잘해야한다는 제텔카르텐 방법론의 주장을 책을 통해서 한번 확인 할 수 있는 시간이었다.\n모든 자료가 영어로 되어있어서 너무 피곤하지만 영어는 프로그래머와 뗄레야 뗄 수 없기 때문에 즐기고 있습니다!!!\n"},"03_Tip&Tech/01_Product/두-번째-뇌(Second-Brain),-디지털-정원(Digital-Garden),-제텔카스텐(Zettelkasten)-사이트-모음":{"title":"두 번째 뇌(Second Brain), 디지털 정원(Digital Garden), 제텔카스텐(Zettelkasten) 사이트 모음","links":["01_DailyNote/202309/2023-09-23","tags/clippings","tags/obsidian"],"tags":["clippings","obsidian"],"content":"author:: Posted by\nAnalysisMan’s Blog\nsource:: 두 번째 뇌(Second Brain), 디지털 정원(Digital Garden), 제텔카스텐(Zettelkasten) 사이트 모음\nclipped:: 2023-09-23\npublished::\n#clippings#obsidian\n국내외 두 번째 뇌(Second Brain), 디지털 정원(Digital Garden), 제텔카스텐(Zettelkasten) 관련 사이트 모음입니다.\n관련 사이트를 모으고 있습니다. 링크를 원하시면 제 이메일(analysisman@지메일닷컴)로 알려주세요. 링크해 드리겠습니다.\n한글 사이트 §\n▶ Obsidian Publish 유료 이용 사이트 §\n분석맨의 ‘두 번째 뇌’\n당근마켓 지식 저장소 - Obsidian Publish\n서야’ PARA\nAndrea의 지식 정원\nJeff Second Brain\nObsidianary님 Connecting Dots\n존쌤의 언어습득법\n태극님 cool-tagg’s second brain\n서울비\n졸린 무지님 cckn\n▶ 무료 템플릿 이용 사이트 §\n▷ Jekyll 템플릿 이용 §\nGitHub + Netlify + Digital garden Jekyll template 이용\n분석맨 Digital Garden\n잔향님 Digital Garden\n퀸메이커님 Digital Garden\n세영님의 Digital Garden\n▷ Quartz 템플릿 이용 §\nGitHub + Quartz template 이용\nDQ_Jeon님 Digital Garden\n박차고일어나(신재윤)님 Digital Garden\nHJ님 Digital Garden\n▷ MindStone 템플릿 이용 §\nGitHub + Netlify + MindStone template 이용\n안피곤님 Digital Garden\n위전님 Digital Garden\n\n영문 사이트 §\n▶ 두 번째 뇌, 디지털 정원, 제텔카스텐 사이트 §\n §\nCurated list of Public Zettelkastens, Second Brains, Digital Gardens\nDigital Gardeners (Excel)\n▶ Obsidian Publish 이용 사이트\nObsidian publish 사이트 링크 모음\nObsidian - Obsidian Help\nThe Quantum Well - Obsidian Publish\nFork My Brain - Fork My Brain\nEleanor’s Notes - Obsidian Publish\nAlexis Rondeau - Obsidian Publish\nJoschua’s Garden\nMy second-brain\nLYT Kit\nThe Integral Guide to Well-Being\nHowdy - indo-european.wiki\n▶ 무료 템플릿 이용 사이트 §\n▷ Amethyst Hugo 테마 이용 §\nGitHub + Amethyst + Hugo 이용 (유료 Obsidian Publish와 가장 비슷함) §\nAmethyst 데모 사이트\n §\n▷ Jekyll 템플릿 이용\nGitHub + Netlify + Digital garden Jekyll template 이용\nJekyll 데모 사이트\n▷ Quartz 템플릿 이용 §\nGitHub + Quartz template 이용\nQuartz 3.2\n▷ Zola 템플릿 이용 §\nGitHub + Netlify + Zola template 이용\nPeter’s 2nd Brain (Zola template 데모 사이트)\n▷ MindStone 템플릿 이용 §\nGitHub + Netlify + MindStone template 이용\nMindStone 데모 사이트\n연결 문서 §\n_Index_1_Obsidian\n두 번째 뇌(Second Brain)란 무엇인가?\n옵시디언 퍼블리시(Obsidian Publish) 사용 후기\n옵시디언 무료로 퍼블리시하는 방법"},"03_Tip&Tech/01_Product/무료로-옵시디언-퍼블리시하는-방법-깃헙(GitHub)과-옵시디언(Obsidian)을-연동하여-블로그-만들기-2":{"title":"무료로 옵시디언 퍼블리시하는 방법 깃헙(GitHub)과 옵시디언(Obsidian)을 연동하여 블로그 만들기 2","links":["01_DailyNote/202309/2023-09-22","tags/clippings","tags/obsidian"],"tags":["clippings","obsidian"],"content":"author:: by 오송인\nsource:: 무료로 옵시디언 퍼블리시하는 방법: 깃헙(GitHub)과 옵시디언(Obsidian)을 연동하여 블로그 만들기 2\nclipped:: 2023-09-22\npublished::\n#clippings#obsidian\n2022.02.21 - [하루하루/일상] - 무료로 옵시디언 퍼블리시하는 방법: 깃헙(GitHub)과 옵시디언(Obsidian)을 연동하여 블로그 만들기\n[\n무료로 옵시디언 퍼블리시하는 방법: 깃헙(GitHub)과 옵시디언(Obsidian)을 연동하여 블로그 만들기\n옵시디언에서 한 달에 16000원인가 내면 옵시디언의 내용들 중 취사선택하여 개인 블로그로 퍼블리시하는 것이 가능합니다. 하지만 저는 제가 제일 공을 들이고 있는 영어공부에 쓸 돈도 없기 때\nslowdive14.tistory.com\n](https://slowdive14.tistory.com/1299801)![](https://scrap.kakaocdn.net/dn/ctOAc1/hyNH04xZUJ/jNFGx5oJ4QgnVkYnZsOUp0/img.png?width=800&amp;height=401&amp;face=0_0_800_401,https://scrap.kakaocdn.net/dn/HMD5N/hyNGHFvq75/cnB8ktJbQ3CRkOKQXZtoZk/img.png?width=800&amp;height=401&amp;face=0_0_800_401,https://scrap.kakaocdn.net/dn/pq6F4/hyNH0jbkaR/qL8JfjdBLKAF2E4cPc2N9K/img.png?width=1811&amp;height=908&amp;face=0_0_1811_908)\n위 글에서 옵시디언의 웹 퍼블리싱에 성공한 템플릿은 1. 모든 백링크를 보여주지 않으며 2. 그래픽뷰가 지원되지 않는다는 한계를 지닙니다. \n이 두 가지를 보완하는 템플릿을 발견하여 공유합니다.\n아래 유튜브에서 설명하는 그대로 따라서 설치하면 됩니다. \n\n한 가지 주의사항은 아래 예시처럼 반드시 front matter를 붙여야 사이트가 제대로 동작한다는 것입니다.\n\n제 옵시디언에는 300개 정도의 메모가 모였습니다.\n1000개의 메모를 목표로 하고 있고, 아래 사이트를 이용하여 생각을 체계화하는 연습을 할 생각입니다. \n완성된 글의 일부를 티스토리 블로그와 브런치에 동시 발행할 생각이고요.\n재미있는 사고 실험의 장이 될 것 같습니다.\nhttps://slowdive.netlify.app/\n[\nHome\nMy digital garden\nslowdive.netlify.app\n](https://slowdive.netlify.app/)\n페이지 예시를 캡처해 둡니다.\n\n덧\n1. 파일명이 한글로 되어 있으면 그래픽뷰에서 에러가 나는 듯합니다. 링크/백링크 연결이 이상하게 이어집니다.\n2. 파일명이 영어여도 dog, dog2 이런 식이면 역시 그래픽뷰에서 분간을 못 하네요.\n3. 파일명이 영어여도 프론트매터 타이틀이 한글이면 그래픽뷰 연결이 잘 안 되네요.\n-&gt; 결론: 파일명과 프론트매터 모두 영어로 써야 하나 봅니다. 개발자에게 버그 개선 요청 부탁한 상태인데 응답이 있을지 궁금하네요. 너무 심각한 오류라, 개선이 안 되면 또 다른 템플릿을 찾아봐야 할 것 같습니다. \n- 이하 2022.03.15 내용 덧붙임 -\n그래픽 뷰가 개선이 된다 해도 아직까지 버그가 많아 보여서 아예 없앴습니다. 제게 더 중요한 것은 백링크 지원이니까요.\n없애는 방법은 깃헙이나 데탑의 해당 폴더 경로에서 _layouts/note.html 찾으신 후 아래 빨간펜 친 부분을 삭제 후 저장하시면 됩니다. 데탑에서 하시는 경우에는\na. html 파일을 md 파일로 확장자 바꾼 후\nb. Typora 같은 툴로 열어서 해당 행들 삭제하시고 저장한 후\nc. 다시 html로 확장자 바꾸어\nd. 깃헙 데탑 툴로 깃헙에 올리면 됩니다. \n\n사족이지만 20년도 더 전에 나모 웹에디터로 html 편집하여 ftp로 신나게 올리던 기억이 있네요. 그 때의 수많은 시행착오가 20년 후에 도움이 될지 누가 알았을까요. 뭐든 배워두면 언젠가 쓸 때가 있네요.\n- 이하 2022.03.16 덧붙임 -\n\n개발자께서 하루만에 고쳐줬습니다. 이제 잘 작동합니다.\n\nSyncing a fork하라고 하는데 시행착오 끝에 Fetch upstream 찾는 것까진 성공했으나 버튼 활성화가 안 된 상태라, 결국 원본 템플릿 zip 파일을 다시 다운 받아서 올렸네요. 어디로 가든 서울로만 가면 되니까요. \n"},"03_Tip&Tech/01_Product/스마트노트에-대해서---(1)-제텔카스텐":{"title":"스마트노트에 대해서 - (1) 제텔카스텐","links":["01_DailyNote/202309/2023-09-17","tags/clippings","tags/제텔카스텐"],"tags":["clippings","제텔카스텐"],"content":"author:: by Obsidianary\nsource:: 스마트노트에 대해서 - (1) 제텔카스텐\nclipped:: 2023-09-17\npublished::\n#clippings#제텔카스텐\n스마트노트에 대해서 - (1) 제텔카스텐 §\n스마트 노트 §\n\nHow to Take Smart Notes 책 표지\n숀케 아렌스 박사는 “How to Take Smart Notes(글쓰기를 위한 두번째 뇌)” 책을 통해서 스마트 노트를 소개했습니다. 박사는 기존 글쓰기 방법이 하향식(Top-down)이기 때문에 잘못되었다고 얘기합니다. 대부분 사람들은 글을 쓰기 위해 연필를 쥐고 백지를 쳐다보면 막상 무엇을 쓸 지 한참을 고민해야하기 때문입니다. 그것보다 점진적이고 귀납적이며 상향식(Bottom-Up) 글쓰기 방식인 제텔카스텐 방식을 소개합니다.\n제텔카스텐(Zettelkasten) §\n\n니콜라스 루만 교수의 제텔카스텐 \n23,000개의 짤막한 메모를 써서 1년 만에 박사학위를 따고 대학교수가 된 사람이 있습니다.\n그는 바로 제텔카스텐을 고안한 20세기 저명한 독일의 사회학자인 니콜라스 루만 교수입니다. 그는 원래 고등행정재판소 등에서 공직생활을 하고 있었으며 10년 동안 23,000개의 메모 카드를 모아 자신 만의 독특한 이론을 만들어내 1년 만에 박사 학위를 취득하고 독일 빌레펠트 대학교에 임용되었습니다. 그는 그 후로 평생 동안 90,000개의 메모를 활용해 현대 사회학 분야에서 20세기 고전으로 불리는 대작 2권을 포함해 70권의 책과 400여편의 논문을 작성하며 자신만의 사상을 만들어냈습니다.\n그는 스스로도 이렇게 할 수 있었던 이유를 자신의 두번째 뇌인 제텔카스텐 덕분이라고 숨기지 않고 사람들에게 말하고 다녔습니다. 하지만 사람들은 제텔카스텐에 대해서 그 당시에는 관심을 갖지 않았습니다. 하지만 오히려 사후에 믿기 놀라운 정도의 다작에 대해서 궁금해했고 그의 메모 상자 자체를 연구하기 시작했습니다. 그리고 그의 제텔카스텐 글쓰기 기법이 연구되기 시작했습니다.\n제텔 카스텐은 독일어로 메모 상자라는 뜻을 가지고 있습니다. 제텔카스텐은 새롭게 알게 된 정보를 작은 카드에 자신만의 단어로 요약하고 이를 연결해서 새로운 글을 작성하며 지식을 확장해나가는 시스템입니다.\n제텔카스텐 방법 §\n3가지 메모 §\n\n임시메모(Fleeting Notes)\n문헌메모(Reference Notes)\n영구메모(Permanent Notes)\n\n1. 임시메모(Fleeting Notes) §\n임시메모는 생활하면서 잠시 적게되는 메모, 끄적임, 정리되지 않은 아이디어 등 입니다. 임시메모는 문헌메모로 발전시키지 않으면 금방 사라지는 정보입니다.\n2. 문헌메모(Reference Notes) §\n\n카드 번호를 통한 노트 연결\n외부 정보 중에 기록할만한 내용을 발견하면 카드 한쪽 면에 서지 정보(책 제목, 저자, 발행년도, 출처 등)을 적습니다. 그리고 반대편에는 자신의 말로 3~5문장으로 요약합니다. 숫자와 문자를 섞어 카드 번호를 작성하고 다른 문헌 메모들과 연결합니다. 문헌 메모는 상자 중에서 서지 상자에 넣습니다.\n영구메모(Permanent Notes) §\n\n노트 상자에 넣어두는 순서\n영구메모는 제텔카스텐에서 가장 중요한 메모이며 나만의 지식이 되는 메모입니다. 특정 주제에 대해 문헌 메모가 쌓이게 되면 이를 바탕으로 하나의 글을 작성하게 되는데 이것이 바로 영구메모가 됩니다. 문헌 메모와 마찬가지로 숫자와 문자를 섞어 카드 번호를 작성하고 다른 영구 메모들과 연결합니다. 영구 메모는 상자 중 본 상자에 넣습니다.\n참조 §\n[\nThe Zettelkasten Method - LessWrong\nEarly this year, Conor White-Sullivan introduced me to the Zettelkasten method of note-taking. I would say that this significantly increased my research productivity. I’ve been saying “at least 2x”.…\nwww.lesswrong.com\n](https://www.lesswrong.com/posts/NfdHG6oHBJ8Qxc26s/the-zettelkasten-method-1)![](https://scrap.kakaocdn.net/dn/bsz9rl/hyNLGsqaWF/hcr2rDZSHG5UNuVO62gMVK/img.jpg?width=696&amp;height=274&amp;face=0_0_696_274)"},"03_Tip&Tech/01_Product/쓸만한-Obsidian-웹클립퍼가-나왔네요!--클리앙":{"title":"쓸만한 Obsidian 웹클립퍼가 나왔네요!  클리앙","links":["01_DailyNote/202309/2023-09-16","tags/clippings","tags/obsidian"],"tags":["clippings","obsidian"],"content":"author:: 클리앙\nsource:: 쓸만한 Obsidian 웹클립퍼가 나왔네요! : 클리앙\nclipped:: 2023-09-16\npublished::\n#clippings#obsidian\n저는 evernote, bear, devonthink 를  근 10년간 사용하다 최근에 notion 으로 정착했습니다.\n그런데 notion 의 그 block 개념이 썩 마음이 들지 않고 뭔가 노트 치장에 몰두하게 하는 주객이 전도된 느낌이랄까요.. 무엇보다 너무나도 느려터져서 대안을 찼던 중에 인터넷에서 다음과 같은 캐치프레이즈를 내세우는 앱을 발견하였습니다.\nA second brain, \nfor you, forever.\nObsidian is a powerful knowledge base on top of a local folder of plain text Markdown files.\nObsidian! 흑요석?\nhttps://obsidian.md/\n제가 지금까지 노트앱을 사용하면서 아쉬었던 점들을  모두 구현해 놓았더군요.!\n무려 오픈소스에 테마와 플러그인을 통해 크롬처럼 앞으로 어떻게 확장될지 기대가 됩니다.\n제가 obsidian 을 종착지로 정한 이유는 다음과 같습니다.\n1. 공짜 (오픈소스)  개인 용도로 무료\n2. 로컬 저장이 원칙  (계정 따위 필요없음)\n3. 테마와 플러그인으로 무한한 확장성\n4. 다양한 싱크 지원 (현재 ios 와 동기화는 icloud 만 지원하는데 앞으로 구글 드라이브, dropbox 등 지원 예정)\n5. 맥, 윈도우, 리눅스 지원\n6. 모든 문서가 md 파일 형식으로 저장 (앱 종속성 없음)\n7. 노션이나 에버노트와는 차원이 다른 속도\n8. Graph View\n다만 에버노트의 웹클리퍼 같은 강력한 확장 프로그램이 없어서 좀 불편하지만 markdownload(https://forum.obsidian.md/t/markdownload-markdown-web-clipper/173) 을 사용하고 있었는데요. (웹페이지를 마크다운 파일 형식으로 다운로드한 후 다시 앱에 넣어주어야합니다)\n며칠전에 클릭 한번으로 간단히 웹페이지를 저장할 수 있는 자바스크립트가 올라왔습니다.\nhttps://gist.github.com/kepano/90c05f162c37cf730abb8ff027987ca3\n\n작동 영상\n제가 사용하는 테마는 California Coast 입니다. 자세한 모습은 아래 영상 참조하세요. \n앱의 기본 gui 가 좀 못생겼습니다. 다양한 테마가 있으니 한번 봐보세요.\nObsidian 처음 사용자 분은 아래 영상 참조하세요"},"03_Tip&Tech/01_Product/옵시디언-obsidian---최고의-마크다운-노트프로그램-(노션과의-비교)":{"title":"옵시디언 obsidian - 최고의 마크다운 노트프로그램 (노션과의 비교)","links":["01_DailyNote/202309/2023-09-16","tags/clippings","tags/obsidian"],"tags":["clippings","obsidian"],"content":"author:: null\nsource:: 옵시디언 obsidian - 최고의 마크다운 노트프로그램 (노션과의 비교)\nclipped:: 2023-09-16\npublished::\n#clippings#obsidian\nobsidian 에 대한 팁과 사용방법에 대한글을 계속 작성합니다.\n\n관련글 모음 :\n\n옵시디언을 소개하며… §\n각종 노트프로그램을 전전 하다가 궁극의 노트프로그램인 옵시디언에 정착을 하였다. 옵시디언을 사용하면서 느낀점과 장단점들을 정리한다.\n옵시디언은 마크다운 에디터이다. (마크다운에 대한 장점들은 구글에 많으니 굳이더 설명하지 않는다.)\n마크다운 에디터들은 여러가지가 있으므로 각각 다 깔아보고 써본후 각자 스타일에 맞는 것으로 쓰면된다. 그 여러가지 툴들 중에서는 옵시디언은 여타 에디터들과는 차별되는 사항들이 많다.\n이번 기회에 옵시디언을 설치해보시고 활용해보시바란다.\n\n공식홈페이지 : https://obsidian.md/\n\n국내 사용자모임 단톡방 §\n옵시디언과 관련하여 사용자들끼리의 소통방이 있다.\n\n국내사용자모임 : https://open.kakao.com/o/gSwzeNAd\n\n옵시디언의 장점 §\n설명하는 장점들은 특정 플러그인을 연동해야 사용 할 수 있는 기능들이 있다. 플러그인에 대한 연동은 추후 다른 포스팅에서 사용법과 팁들을 작성할 예정.\n동기화 (온전한 나의 소유) §\n옵시디안의 모든 컨텐츠(플러그인 및 설정 포함)는 obsidian 노트북 폴더안에 있다. 때문에 해당폴더만 어디든 업로드하면 동기화가 된다.\n즉 해당 폴더를 git 으로 혹은.. 구글드라이브로 하던, 드롭박스로 하던 온전히 사용자가 원하는데로 동기화를 하면 된다. 공식적으로 옵시디언의 유료 싱크기능을 제공하고있지만 사용하지 않아도 전혀 무방하다.\n모바일 앱 §\n모바일앱을 지원한다. 아마 일렉트론기반의 앱으로 추정이된다. 때문에 각종 플러그인도 대부분 모바일에서도 호환이 된다.\n\n모바일앱지원\nhttps://obsidian.md/mobile\n드롭박스나, 구글드라이브의 싱크를 사용 할 수있으므로 모바일과 동기화를 사용하면, 데스크탑과 동일하도록 모바일앱을 바로 이용할 수 있다.\n\n단, 단순히 작성된 마크다운의 글을 확인하는용도라면 git의 md기능을 이용하는것이 더 가볍고 현명하다. 추후 다른포스팅에서 설명하겠다.\n\n\ngit의 md페이지를 활용하면 모바일에서 바로 보기가능\n노트간 링크 §\n각 노트들에 대해서 링크를 할수 있다. 링크 기능은 타 노트에서도 지원하는 기능이다. 하지만 옵시디언은 링크간의 유효성을 검증해서 링크변경시 자동으로 링크르 변경해준다.\n다음의 시나리오를 살펴보자.\n[노트링크] -&gt; ./노트링크.md\n\n위와같이 링크가 걸려있을때… 노트링크.md 파일명을 노트링크_이름변경.md 으로 변경하면 어떻게 될까?\n다른 대부분의 노트 프로그램들은 링크가 깨져버린다. 하지만 옵시디언은 기존 [노트링크] 의 내용이 [노트링크_이름변경] 으로 자동변경이 된다. 즉, 이미 작성한 링크에 대해서는 노트명을 변경하거나, 경로를 바꾼다고해도 노트의 전체적인 연결 구조는 그대로 유지 된다.\nbacklink 지원 §\nbacklink 는 일종의 참조 개념이다. 즉 특정노트가 어디에서 링크를 걸고있는지 확인이 가능하다.\n\n백링크기능의 예 https://zettelkasten.de/posts/backlinks-are-bad-links\n각종 웹기반 위키서비스들에서 주로 제공하는 기능으로, 노트를 1단계 깊이로(폴더구분없이 같은 depth 로 작성) 하더라도 백링크기능으로 인해 입체적으로 노트필기가 가능해진다. 각 포스팅을 거미줄 처럼 얽혀 놓더라도, 이노트가 어디서 호출되고 어디로 가는지 흐름을 잘 볼수있다.\n또한 백링크는 에버그린노트필기 방식https://brunch.co.kr/@kys4620/157을 구현하기에 필수적인 기능이다.\n파일링크지원 §\nfile:// 로 시작하는 링크를 지원한다. windows PC 에서는 옵시디언에서 특정파일이나, 폴더를 바로 열수있다. (윈도우OS 한정)\n\n관련 플러그인 : https://github.com/MichalBures/obsidian-file-path-to-uri\n\n특정 문서나 폴더들을 매번 열어서 사용해야하는경우 유용하다.\n노트 컨텐츠 embedded 가능 §\n노트의 특정 부분을 삽입할수있다. 그림이 아니라 직접 iframe 과 같은 형태로 삽입이 된다.\n\n사용예제 : https://www.youtube.com/watch?v=TP7NGi_csys\n\n해당기능을 사용하면 각각의 다른 노트의 특정 내용을 여러노트안에 동일하게 삽입 할수있다.\n\n참고로, 해당 문법은 마크다운 표준에서 벗어난다.(마크다운에 표준이라고 하는것도 우습지만…) 옵시디언에 특화된 기능으로, 타 노트앱에서의 호환은 불가능한것이 단점이다.\n\nhtml 태그 바로사용가능 §\n&lt;html&gt; &lt;/html&gt; 과 같이 원하는 html 태그를 언제든지 삽입 할 수있다.\n해당기능중에 가장좋은것은 iframe 이다. 원하는 모든 웹사이트를 페이지 안에 넣을수있다.\n필자의 경우 iframe 을 다음과같이 활용중이다.\n\n증권의 실시간 시세창\n구글 시트\n\nfront matter 검색 지원 (노트에 대한 무한확장) §\n각 마크부분앞쪽에 --- 으로 시작하는 front matter 를 지원한다. front matter 는 일종의 문서의 정보를 넣는다고 생각하면될 것 같다.\nfront 형식은 정해져있지 않다. 사용자가 원하는 모든 것을 항목을 작성 할 수 있으며, 각 항목에대한 검색이 가능하다.\n\n위와같이 사용자가 원하는 항목들을 추가한다는건 노트에 대한 확장성을 무한으로 키워준다.\n다음과 같이 두개의 노트가 있다고 가정하자.\n---\ntitle: A-1 기능에 대한 개발이슈\ntags: \n - A업무\n - 개발이슈\ncategory: A업무\nsub-category: 완료\nstart-date: 2021-01-02\ntarget-date: 2021-02-01\nend-date: 2021-02-01\n---\n\n---\ntitle: A 사업보고서 작성\ntags :\n - A업무\ncategory: A업무\nsub-category: 미완료\nstart-date: 2021-01-02\ntarget-date: 2021-02-05\nend-date: 미완료\n---\n\n위와 마크다운위에 같이 작성하여 관리하게 될 경우 검색식만 잘 작성하면 현재 업무에 대한 진행상황을 한번에 알수있다.\n예제1) A업무에 대한 진행중(미완료) 업무를 검색에 대한 pseudocode (dataview 플러그인을 활용한예제는 추후에 다시 작성예정)\n- A업무 진행 사항검색\n  - category==&#039;A업무&#039; &amp;&amp; sub-category==&#039;미완료&#039;\n\n위와 같이 일관된 front matter로 관리하게 될 경우 스케쥴관리, 진행사항관리, 할일관리등등 원하는 노트의 모든기능을 만들 수있다.\n\n타 노트앱의 경우 front matter를 작성은 가능하나, front matter 에대한 중복검색, 조건검색등의 기능이 없다. 옵시디언은 dataview 플러그인을 사용하게 되면 front matter 에 대한 검색기능 및 자동 리스트화가 가능하다. (추후팁으로 작성하겠다.)\n\ntag 지원 §\n태그 클라우드가 지원된다. front matter 에 tags 추가하거나 게시글 중간에 를 #태그명 을 작성하면 바로 해당 문서가 특정 태그로 분류되며, 게시글 중간의 #태그명 을 입력한다거나 검색식에서 tag: 조건으로 검색 및 필터링이 가능하다.\n\ntag로 검색\n이지윅 에디터 §\n옵시디언은 이지윅 에디터를 지원한다. 특정 플러그인을 쓸경우 에디터가 텍스트 상태와 미리보기상태가 공존하게된다.\n\n에디트모드 화면 - 이미지도 바로 에디트모드에서 확인가능\n즉 사용자가, 완전 텍스트기반 에디터를 사용할지, 미리보기기능을 쓰면서 글을 작성할지, 모든걸 사용자가 정할 수 있다. (관련 플러그인 추후 설명예정)\n마크다운에 익숙하지 않은 사용자라고 해도 이지윅 에디터기능을 활용하면 마크다운에 대한 적응기간없이 바로 사용할 수 있다.\n첨부파일 §\n파일을 바로 ctrl+c ctrl+v 으로 붙여넣기가 가능하다. 에디팅 모드에서 파일을 붙여넣으면 특정 옵시디언의 폴더로 복사가되며, 바로 링크가 생성이 된다.\n이미지나 파일들에 대한 붙여넣기 기능으로 고민할 필요가 없다.\n다양한 테마 (완전 커스터마이징 가능) §\n각종 테마들을 다양하게 사용할 수 있다. 다운로드 하고 적용 하는것이 원클릭으로 되며 다크모드, 화이트모드도 바로바로 변경가능하다.\n\n프로그램내의 테마 선택화면\n각 theme 는 css문법을 조금 만 알면 원하는 모든 사항을 다 뜯어 고칠 수 있다.\n\nminimal theme https://github.com/kepano/obsidian-minimal 은 css 문법을 몰라도 각 사항들을 모두 뜯어 고칠수있다.\n\n필자의 경우 minimal theme 를 다음과 같이 색상을 변경하여 사용중이다.\n\n직접 커스터마이징 한 에디터\n옵시디언은 ui 의 모든 사항까지 모두다 커스터마이징이 가능하다!\n다양한 커뮤니티 플러그인 §\n옵시디언은 사용자가 직접만든 플러그인을 제공한다.\n\n플러그인설치화면\n엄청나게 많은 플러그인들이 존재하며, 매번 새로운 플러그인들이 계속 업데이트 된다. 아무래도 일렉트론앱이다보니, 기존 웹기반의 javascript 을 붙이기 용이한것같다. 무수한 브라우져 기반 js 프로젝트들이 포팅이 되고있다.\n\n정말 유용한기능들의 플러그인들이 많다. 각종 플러그인과 사용팁들은 추후 설명을 할예정\n\n플러그인을 활용하다면, pdf export, 프리젠테이션기능 등등 무한히 확장가능한다\n옵시디언의 단점 §\n물론, 단점도 있다.\n오픈소스가 아님 §\n옵시디언은 오픈소스가 아니다. 때문에 왠지모르게 불안하다.\n\n관련 포럼 게시글 : https://forum.obsidian.md/t/open-sourcing-of-obsidian/1515\n\n관련하여 참 많은 이야기들이 오고가고있다.ㅠㅠ 다른사람들도 다 불안하게 생각하고 있다.ㅠㅠ\n그나마 마크다운이다보니 다른 툴로의 전환이 크게 어렵지 않아, 언제든지 수 틀리면 다른 대안을 찾을 것이다. (대안은 진짜 일이 닥쳤을때 생각해보자.)\n옵시디언의 앱 자체도 훌륭하지만, 커뮤니티 각종 커뮤니티 플러그인들이 옵시디언의 완성도를 더 높여주고있는 상황이라 앱의 과금과 관련하여 바로 장난치는 일은 없을것이라 믿고있다.\n프로그래밍 지식 §\n좀더 파워풀?하게 사용하려면 프로그래밍지식이 필요하다.\n\n외형을 내가 원하는 대로 수정하기위해서는 … CSS에 대한 지식이 필요\ngit 기반 sync 을 사용하기위해서는 … git work flow 에 대한 대략적인 이해 필요\ndataview 등의 플러그인들을 활용하기위해서는 … 일종의 쿼리에대한 대략적인 이해 필요\n\n새로운것을 배우기 좋아하고 컴퓨터 프로그래밍에 대한 거부감이 없다면 기능이 거의 무한정 확장가능하지만, 반대로 프로그래밍지식이 없는 일반의경우 그냥 사용하기 복잡한 오타쿠 같은 툴로 인식 될 수도있겠다.\n마크다운 표준 미준수 §\n플러그인의 각종기능들이 늘어남에 따라 깃헙 마크다운표준? 에서 점점 멀어지는 느낌이다. 현재는 잘 사용하고있지만, 앱의 지원이 끊겼을때가 걱정이 슬슬된다. (오픈소스라면 좋았을것을 ㅠㅠ)\n노션과의 비교 (오프라인 마크다운툴과의 비교) §\n노션과 비교자체가 좀 우숩긴하다. 노션을 2년간 유료결제하여 사용한 입장에서 옵시디언(혹은 오프라인 마크다운툴) 과 비교한다.\n장문 처리 (옵시디언 승리) §\n노션에 1000라인이 넘어가는 자료를 올리고 정리하다보면, 거의 사용하기 불가능정도로 느려진다. 데이터시트를 번역, 관리를 노션에서 해보려고 노력을 해봤으나 사용불가능할 정도로 느려졌다.\n반면, 옵시디언은 아무리 장문이라도 속도 저하없이 활용이가능하다.\n접근성 (노션 승리) §\n모바일앱이나 크로스 플랫폼관점에서의 접근성은 노션이 좋다.\n당연한것이 웹브라우져 기반의 온라인 에디터니 오프라인기반의 옵시디언과의 비교는 불가. 노션은 협업이나, 외부 공유등의 기능은 타 노트앱과 비교자체가 불가능하다.\ndb 활용 (무승부) §\n노션의 db 를 활용하면 여러가지 정리가 가능하다. 하지만, 해당 기능은 옵시디언의 front matter 검색기능과 dataview 기능을 이용하면 대체가 가능하다.\ndb 정리기능은 노션만의 특별한기능은 아니다.\n스타일설정 (옵시디언 승리) §\n노션에서 글의 스타일링은 불가능하다. 몇가지 꼼수가있긴한데… 굳이 그렇게 까지해서 사용해야하나싶다;\n노트의 소유 (옵시디언 승리) §\n노션은 모든 노트에 대해서 내것이 아닌것 같은 느낌이든다. (백업을 위해 노션에서 EXPORT 를 해보면 알수있다.)\n마크다운기반이라고 하지만, EXPORT 된 결과물은 실제로 타 마크다운앱에서 불러오기가 힘들다. (특히 테이블이 csv로 export 되는데 다시 어떻게 정리 해야할지 막막하다.) 노션에 데이터가 쌓일수록 다른 플랫폼으로의 이전은 불가능하다고 생각하면될듯싶다.\n부가기능(api) 연동 (옵시디언 승리) §\n오프라인 로컬기반에서 모든데이터가 접근가능한 옵시디언의 환경과 비교하는것이 맞는가 싶긴하지만…\n노션에 각종 부가기능이나 api 연동 기능들이 있다한들, 옵시디언과 비교자체가 불가능하다.\n결론 §\n옵시디언 모든 노트허브로서 활용 §\n각 노트들을 다음의 여러 경로에 나눠서 올렸었다.\n\ngithub page\ntistory blog\nnotion\nhard disk markdown file\n\n필자는, 각각의 흩어져있던 정보들을 모두 옵시디언으로 통합하였다. 티스토리 블로그나, 깃헙 페이지의 경우 따로 파이썬 스크립트를 작성하였고, 버튼을 누르면 옵시디언 포스팅과 동기화를 맞춘다. 즉, 흩어져있던 모든 정보들을 내 하드디스크내의 마크다운으로 저장되어있으며, 옵시디언에서 한번에 검색이 가능하다.\n만약, 외부에 공유해야할 자료또한 스크립트를 작성하여, 옵시디언내부에서 노션 이나 gist 로 퍼블리싱하고 동기화한다. (obsidian shell 을이용한 외부 파이썬 스크립트 호출)\n그냥 프로그램을 취미로하는 정리 덕후에게는 정말 좋은 툴이다.\n나만의 노트툴을 만들기에 최적 §\n이런저런 ui 커스터마이징과 단축키, 외부 쉘스크립트 연동을 스터디하여 나만의 최강 노트툴을 만들자.\n옵시디언 짱;;"},"03_Tip&Tech/01_Product/옵시디언-무료로-퍼블리시하는-방법---분석맨의-'두-번째-뇌'":{"title":"옵시디언 무료로 퍼블리시하는 방법 - 분석맨의 '두 번째 뇌'","links":["01_DailyNote/202309/2023-09-22","tags/clippings","tags/obsidian"],"tags":["clippings","obsidian"],"content":"author:: null\nsource:: 옵시디언 무료로 퍼블리시하는 방법 - 분석맨의 ‘두 번째 뇌’\nclipped:: 2023-09-22\npublished::\n#clippings#obsidian\n옵시디언의 수많은 장점에도 불구하고, 단점 중에 하나는 노트의 내용을 공유하기 쉽지 않다는 점이다. 노트 하나만 공유하는 방법은 맨 아래 ‘참고 자료’에 있는 ‘옵시디언(Obsidian) 개별 노트를 퍼블리시(publish)하는 쉬운 방법’을 참고하면 된다.\n하지만 이 방법은 폰트 등 스타일 적용이 안 되고 백링크, 그래프 표시가 안 된다. 블로그 형태의 퍼블리시라기보다 다른 사람과 노트를 일시적으로 공유하는 용도도 적합하다.\n2. Digital garden Jekyll template을 이용해 리파지터리 생성하기 §\n\n2-2. 원하는 이름을 넣고 리파지토리(Repository)를 생성한다.\n그러면, 리파지토리가 자신의 계정에 생성이 된다.\n\n4. 깃허브 데스크탑에서 로컬에 리파지토리 클론하기 §\n4-1. 화면에 보이는 ‘Add’ 버튼이나 File -&gt; Clone Repository을 통해 위의 GitHub.com에서 생성했던 자신의 리파지토리를 클릭하고 클론을 만든다.\n\n4-2. 클론된 폴더 위치는 아래와 같이 해당 리파지토리에 오른쪽 마우스 클릭 후, Real in Finder로 확인할 수 있다. (macOS 기준)\n\n분석맨은 iCloud에 옵시디언 노트를 저장하고 있어서 아래와 같은 폴더에 리파지토리가 위치한다.\n/Users/analysisman/Library/Mobile Documents/iCloudmdobsidian/Documents/AnalysisMan/secondbrain\n5. 넷틀리파이(Netlify) 사이트에서 계정 만들기 §\nwww.netlify.com 사이트에서 Sign up을 클릭하여 계정을 만든다.\n깃허브 계정을 이미 만들었으니, GitHub 아이콘을 클릭하여 계정을 쉽게 만들 수 있다.\n\n6. 넷틀리파이(Netlify) 사이트에서 깃허브 리파지토리 import 하기 §\n6-1. 상단 메뉴의 Sites에서 Import an existing project를 클릭하여 깃허브에서 만든 리파지토리를 선택한다.\n\n\n6-2. 기본 설정은 변경하지 말고 하단의 ‘Deploy site’로 사이트를 만든다.\n\n6-3. 아래와 같이 ‘Site deploy in progress’ 메시지가 보이며, 약 2~5분 정도 시간이 걸린다.\n\n7. 넷틀리파이(Netlify)에서 사이트 URL 생성 §\n넷틀리파이(Netlify)에서 만들어진 사이트를 클릭하면 My digital garden - Welcome! 페이지가 보인다.\n\n\nSite settings에서 Change site name을 클릭하여, 이름을 바꾼다.\n사이트에 고유한 이름이라 없는 이름을 사용해야 한다.\n분석맨은 이상하게 이름 타이핑이 안 되어 다른 편집기에서 이름을 복사/붙여넣기 했다.\n\n자신만의 도메인(domain)을 가지고 있으면, 아래와 같이 도메인과 연동한다.\n9-1. Add custom domain을 클릭 후, 자신의 도메인을 입력한다.\nSite overview -&gt; Domain settings -&gt; Add custom domain을 클릭한다.\n\n\n자신이 가지고 있는 도메인에 서브 도메인을 추가해 입력한다.\n\n9-2. Verify를 누르면, 이미 등록된 도메인이니 Add domain을 클릭하라고 나온다.\n\n9-3. Check DNS configuration을 클릭하면, 도메인을 어떻게 지정할 수 있는지 방법을 알려준다.\n\n아래와 같이 CNAME 레코드를 추가하라고 안내한다.\n\n9-4. 자신의 Domain Registra에서 CNAME 지정하기\n자신의 도메인을 등록해서 사용하는 서비스에서 아래와 같이 CNAME을 넷틀리파이(Netlify) 주소로 포인팅 시켜준다.\nPublic DNS 서버로 전파(propagate) 되는데 시간이 걸릴 수 있다.\n\nmacOS는 아래와 같은 경로에 있는 _notes 폴더에 퍼블리시하고자 하는 노트의 .md 파일을 넣어주고 **GitHub Desktop**을 통해 Commit과 Push를 해준다. \n/Users/analysisman/Library/Mobile Documents/iCloudmdobsidian/Documents/AnalysisMan/secondbrain\n\n10-2. My digital garden 첫 페이지 변경해보기\n첫 Welcome! 화면은 아래와 폴더의 index.md 파일에 있는 내용이 보여진다.\n/Users/analysisman/Library/Mobile Documents/iCloudmdobsidian/Documents/AnalysisMan/secondbrain\nindex.md 파일을 복사해서 index_org.md로 원본은 백업하고, index.md 파일을 수정해본다. 수정된 파일은 아래 스크린샷과 같이 +녹색 아이콘이 ·오렌지색 아이콘으로 바뀐다.\n\nindex.md 파일을 수정 후, GitHub Desktop에서 Commit to master를 클릭하고 Push origin도 클릭한다.\n\nGitHub에서 보면 자신이 적은 내용으로 업데이트 됨을 확인할 수 있다.\n\n이후, 네틀리파이(Netlify)에 아래와 같이 Building -&gt; Processing -&gt; Pubished의 과정을 거쳐 퍼블리시된다.\n\n11. 디지털 정원(Digital Garden) 첫 페이지 §\n첫 메인 페이지(_pages 폴더의 index.md)를 편집기로 수정해 아래와 같이 올려보았다.\n\n첫 페이지에서 링크한 Digital Garden (_notes 폴더의 Digital Garden.md) 페이지도 아래와 같이 수정했다.\n\n12. 디지털 정원(Digital Garden) 그래프 §\n아래와 같이 페이지 아래 부분에 옵시디언의 꽃인 그래프도 만들어져 있다.\n\nmacOS에서는 GitHub Desktop 앱을 이용하지 않고 터미널 상에서 아래와 같은 명령어를 통해 Commit과 Push를 해도된다.\ngit add *\ngit commit -m “2022.05.08-Obsidian-notes_commit”\ngit push -u origin master\nJekyll은 폴더 안의 이미지를 렌더링하지 않는다. 그래서 마크다운 형태로 표현한 것은 이미지 표시가 되지 않아 액박으로 나온다. 아래와 같이 HTML 형태로 선언해 주어야 한다.\n"},"03_Tip&Tech/01_Product/옵시디언(Obsidian)-개별-노트를-퍼블리시(publish)하는-쉬운-방법":{"title":"옵시디언(Obsidian) 개별 노트를 퍼블리시(publish)하는 쉬운 방법","links":["01_DailyNote/202309/2023-09-16","tags/clippings","tags/obsidian"],"tags":["clippings","obsidian"],"content":"author:: by 오송인\nsource:: 옵시디언(Obsidian) 개별 노트를 퍼블리시(publish)하는 쉬운 방법\nclipped:: 2023-09-16\npublished::\n#clippings#obsidian\n[\nGitHub - jonstodle/obsius-obsidian-plugin: Easily publish notes to the web This plugin integrates with obsius.site to publish m\nEasily publish notes to the web This plugin integrates with obsius.site to publish markdown notes on the web. - GitHub - jonstodle/obsius-obsidian-plugin: Easily publish notes to the web This plu…\ngithub.com\n](https://github.com/jonstodle/obsius-obsidian-plugin)\n옵시디언 커뮤니티 플러그인에서 obsius publish로 검색합니다.\n설치 후 아래 사진에서처럼 퍼블리시하려는 노트에 마우스 우클릭하면 publish to obsius가 보입니다.\npublish to obsius 클릭하면 퍼블리시 완료되며, 웹주소가 자동으로 카피됩니다.\n웹상에서 위 노트가 어떻게 퍼블리시되는지 아래 링크에서 확인하실 수 있습니다.\n페이지 삭제나 업데이트도 마우스 클릭을 통해 하면 됩니다.\n이 플러그인은 폰트를 비롯한 스타일 적용이 제대로 안 되는 게 단점입니다.\n하지만 노션에서처럼 어떤 노트를 퍼블리시하여 다른 사람과 쉽게 공유할 수 있다는 점이 유용합니다."},"03_Tip&Tech/01_Product/제텔카스텐(Zettelkasten)-어떻게-지식을-기록해야-하는가":{"title":"제텔카스텐(Zettelkasten) 어떻게 지식을 기록해야 하는가","links":["01_DailyNote/202309/2023-09-17","tags/clippings","tags/제텔카스텐"],"tags":["clippings","제텔카스텐"],"content":"author:: Everglowing\nsource:: 제텔카스텐(Zettelkasten): 어떻게 지식을 기록해야 하는가?\nclipped:: 2023-09-17\npublished::\n#clippings#제텔카스텐\n대학교 시절부터 학위 과정을 마치기까지 꽤 오랜 시간 동안 공부를 했는데, 돌이켜 보면 미숙했던 부분이 많았던 것 같다. 그 중에서도 가장 아쉬운 점을 하나만 꼽으라고 한다면 나는 배운 것을 효과적으로 기록할 수 있는 시스템을 일찍부터 갖지 못했던 것을 꼽을 것이다. 노트에 강의 내용을 적기도 하고, 중요한 자료는 스크랩을 하고, 논문을 읽고 하나씩 요약해 보기도 하면서 배운 것을 잊지 않기 위해 많은 시행착오를 거쳤지만 극적인 효과가 있는 방법은 없었다.\n어떻게 하면 내가 시간을 들여 습득한 지식을 잘 보존하고, 잊지 않고 있다가 필요한 순간에 효과적으로 적용할 수 있을까? 끊임없이 새로운 지식을 배우고 기존 지식과 결합해야 하는 일을 해야 하는 현대의 많은 사람들에게 이는 매우 값진 능력이다. 우리 삶의 생산성 관점에서 보았을 때에도, 지식을 잘 쌓을 수 있도록 기록하는 것은 장기적으로 가장 중요한 일이다 (자유로운 삶을 위한 생산성 갖추기). 안타까운 점은 정규 교육과정에서 지식을 기록하는 방법을 자세하게 가르치지 않는다는 것이다. 배워야 할 기술이 아니라 그냥 할 수 있는 일로 여긴다는 것이다.\n다행스럽게도 지식을 잘 기록하는 것에 대해 먼저 고민하고 노력했던 여러 사람들이 있었다. 이번 포스팅에서는 그 중 많은 인기를 얻고 있는 “제텔카스텐” 이라는 시스템에 대해서 소개하려고 한다.\n제텔카스텐: 노트 작성 시스템Permalink §\n제텔카스텐(Zettelkasten)은 독일의 사회학 교수였던 니클라스 루만이 사용한 노트 기록 시스템이다.\n루만은 원래 공무원이었는데, 사회학에 관심이 많아 퇴근 후 사회학 책을 읽고 공부를 하면서 시간을 보냈다. 그도 배운 것을 간단하게 메모했는데, 메모가 유기적으로 쌓이지 않고 금방 잊혀진다는 것을 느끼고는 더 효과적으로 메모를 기록하기 위해 제텔카스텐을 만들었다고 한다. 이렇게 여가 시간에 공부를 하면서 노트를 작성하다가, 그는 메모들의 일부를 사용하여 원고를 작성해서 당시 독일에서 가장 영향력 있는 사회학자 중 한 명이었던 헬무트 셸스키 (Helmut Schelsky) 에게 전달했다. 원고를 받은 셸스키는 즉시 루만이 당시에 설립된 지 얼마 되지 않은 빌레펠트 (Bielefeld) 대학교의 교수가 되어야 한다고 했다. 문제는 당시 루만이 박사 학위는 물론 사회학 관련 학위 자체가 없었다는 것이었다. 그러자 그는 이 기회를 포기하는 것이 아니라, 자신의 메모 상자를 바탕으로 1년만에 사회학 교수가 되기 위한 모든 자격을 획득하여 1968년 빌레펠트 대학교의 교수가 되었다고 한다1.\n\n니클라스 루만이 사용했던 메모 상자. 9만여개의 노트가 있었다고 한다. 지금은 컴퓨터를 사용하여 더 쉽고 효율적으로 구현할 수 있다.\n그는 30년간 교수 생활을 하면서 역서를 제외지고도 58권의 저서와 수백 편의 논문을 발표했다. 심지어 그의 사후에도 연구실에 남아있던 원고를 바탕으로 6권의 책이 더 출간되었다고 한다. 한두 권의 책을 출간하기도 어려운 일임을 생각해 보면 놀라운 생산성이 아닐 수 없다. 많은 사람들이 그가 어떻게 그렇게 높은 생산성과 다작 능력을 유지하는지 궁금해하였고, 루만은 늘 그 원천으로 제텔카스텐을 언급했다.\n그는 어떤 노트 시스템을 사용했길래 높은 생산성을 한결같이 유지할 수 있었을까? 또 그의 메모 상자에는 9만여개의 노트가 있었다고 하는데, 여러 시행착오를 겪어 본 사람으로써 그렇게 많은 노트를 잘 관리할 수 있는 시스템이 어떤 것인지 궁금했다.\n필요한 도구Permalink §\n제텔카스텐 시스템을 만들기 위해서는 두 가지 도구가 필요하다.\n\n\n레퍼런스 저장 도구: 참고자료, 또는 정보의 소스를 저장하기 위한 용도이다. 인터넷의 문서, 논문, 책의 서지정보 등을 저장하여 우리가 정보를 얻은 출처를 저장해 두는 곳이다. 많은 사람들이 추천하는 프로그램으로 Zotero가 있으며, 나는 Zotero 와 Devonthink를 사용하고 있다 (참고: 제텔카스텐을 위한 레퍼런스 관리 도구).\n\n\n메모 상자: 메모를 작성하고 저장할 장소 또는 프로그램이다. 루만처럼 물리적인 상자와 종이를 사용해도 되지만, 더 간단하고 효율적인 프로그램들이 많이 존재한다. 내가 사용하는 프로그램은 Obsidian이며, Roam Research도 유명한 프로그램이다. 사실 노트 간에 링크를 제공하는 기능만 있으면 기본적으로 어떤 프로그램을 써도 구현이 가능하다 (참고: Obsidian: 마크다운 기반의 제텔카스텐 도구).\n\n\n방법Permalink §\n제텔카스텐 시스템에는 기본적으로 세 가지 종류의 노트가 존재한다. 임시 메모로 다른 일을 하던 중 떠오르는 아이디어를 메모하고, 다른 문헌에서 찾은 영감을 주는 내용을 문헌 메모로 저장했다가 최종적으로 영구 메모로 변환한다. 영구 메모는 이름대로 영구적으로 보관하면서 축적하고 개선해 나간다.\n\n임시 메모 (Fleeting Notes): 임시 메모는 저장 용도의 메모가 아니며, 새로운 아이디어가 떠올랐을 때나 기록하고 싶은 내용을 보았을 때 간단하게 적어 나중에 떠올릴 수 있도록 적는 메모이다. 짤막한 문장, 책에 긋는 밑줄, 링크, 키워드 등 다양한 형식을 가질 수 있으나 나중에 처리할 수 있도록 올바른 위치에 저장하는 것이 중요하다. 하루에 한두번 정도 검토를 거쳐 문헌 메모 또는 영구 메모로 만들거나 검토 중 꼭 필요한 내용이 아니라고 판단되면 삭제한다.\n문헌 메모 (Literature Notes): 읽은 내용 중 기억하고 싶거나 나중에 활용할 것 같은 내용을 적어두는 메모이다. 나의 언어로 원본의 출처를 밝혀 간략하게 적는다. 문헌 메모는 레퍼런스 저장 도구에 보관하거나 메모 상자 안에 보관한다.\n영구 메모 (Permanent Notes): 영구적으로 보관할 목적의 메모로, 임시 메모나 문헌 메모가 나의 관심사 및 기존에 있던 영구 메모와 어떤 연관성이 있는지 확인하고 새로운 아이디어나 연결을 발견하면 영구 메모로 적는다. 이 메모는 몇 년 뒤에 보더라도 무슨 말인지 파악할 수 있을 정도로 완성도를 갖추면서도 너무 길지 않게 적고, 완전한 문장으로 적으며 하나의 노트는 하나의 주제만을 담도록 한다. 이 때 기존 메모와의 연결 (링크 활용) 을 적극적으로 활용하도록 한다.\n\n원리 &amp; 팁Permalink §\n제텔카스텐을 운영하다 보면, 각자의 관심 분야가 다르고 선호하는 스타일도 천차만별이기 때문에 조금씩 자신의 스타일로 바꾸어 가며 사용하게 된다. 이것은 원래 제텔카스텐 시스템이 명확한 규칙에 따른 시스템이라기 보다는 방법론에 가까운 것이기 때문에 당연한 현상이다. 그래서 정답을 준수하려고 하기보다는 제텔카스텐의 어떤 면이 뛰어난지를 이해하고 그 원리 안에서 스스로의 취향에 맞춰 메모상자를 운영하는 것이 좋다. 아래는 내가 지키려고 하는 원리 및 best practice 들이다.\n\n하나의 노트, 하나의 아이디어: 제텔카스텐에서 중요하게 강조되는 요소로, 하나의 노트에는 하나의 아이디어만을 적어야 한다는 것이다. 우리가 노트를 만드는 가장 직관적인 (또는 익숙한) 방법은 정보를 습득한 단위로 정리하는 것일 텐데 (책, 강의, 기사 등), 이러한 방식에서는 하나의 노트가 여러 아이디어를 포함하며 자신만의 맥락을 가지고 있어서 다른 노트와 비교하기가 힘들다. 처음에는 조금 어려울 수 있지만, 지식들이 서로 연결되고 계속해서 재사용되게 하려면 습득한 정보를 분해하여 하나의 아이디어만을 갖는 원자적 노트 (Atomic Notes) 들로 만들어야 한다. 이에 대한 근거는 제텔카스텐의 핵심: Atomic Notes 에서 더 자세하게 다루었다.\n노트 간의 연결을 많이 만들기: 제텔카스텐이 지식을 기억하는 것 뿐 아니라, 이를 통해서 새로운 지식을 찾아낼 수 있는 이유이다. 제텔카스텐의 가장 큰 장점은 기존에 알지 못했던 지식들 간의 연관성을 발견하는 것임을 기억하고, 노트 간에 더 많은 연결을 만들려고 노력해야 한다. (참고 포스팅: 적극적으로 링크를 활용하라)\n내 언어로 작성하기: 책에 있는 문장을 그대로 옮겨 적는 것은 최대한 피하고, 내가 이해한 다음 나의 언어로 적어야 한다. 이렇게 직접 처리하지 않고 스크랩만 한 정보는 거의 다시 활용될 가능성이 없다. 또한 직접 요약을 하려고 하면 이해했다고 생각했던 부분을 사실은 이해하지 못하고 있었거나 두리뭉실하게만 알고 있었다는 것을 깨닫게 되는 경우가 많다.\n추측/계획보다는 사실/주장을 적기: 영구 메모의 내용은 “~인 것 같다”, “~하려고 한다” 와 같은 추측, 계획보다는 “~이다”, “~해야 한다” 와 같이 더 명확하게 적는 연습을 하는 것이 효과가 있었다. 추측이나 계획에는 근거가 필요하지 않지만, 사실이나 주장을 적기 위해서는 객관적인 증거나 논거가 필수적이다. 결과적으로 노트 작성은 조금 더 불편해지지만 그만큼 나중에 노트를 볼 때 노트의 완성도나 설득력은 높아진다.\n\n장점 &amp; 효과Permalink §\n노트 시스템을 사용하는 일차적인 목표는 우리가 습득한 지식을 나중에 잘 꺼낼 수 있는 형태로 저장하는 것이다. 그러나 제텔카스텐을 잘 운영하면, 그 외에도 수많은 장점들이 존재함을 경험할 수 있다.\n\n주의력 보존: 기록을 하는 이유는 잊지 않기 위해서이지만, 잊기 위해서 (현재 하는 일에 집중하기 위해) 이기도 하다. 처음 제텔카스텐을 시작해 보면 내 머리속을 떠도는 아이디어나 생각들이 꽤 많음을 느낄 수 있다. 이러한 생각들은 우리의 단기 기억을 차지하며 주의력을 소모하는데, 노트 시스템을 통해 이런 생각들을 오프로딩해 놓으면 현재 하는 일에 마음놓고 주의력을 쏟을 수 있다 (참고: 자이가르닉 효과: 생각도 오프로딩이 필요하다).\n연결, 창의성: 지식을 저장하는 것만큼이나 중요한 것으로, 제텔카스텐은 생각을 개발하는 도구로 사용된다. 노트가 쌓이면서 서로 다른 분야의 연관성을 발견하거나, 같은 주제에 대한 다른 관점을 발견하면서 기존에 없었던 새로운 생각을 개발해낼 수 있다 (참고: 적극적으로 링크를 활용하라).\n장기적인 생산성 향상: 자유로운 삶을 위한 생산성 갖추기에서 언급했듯이, 장기적으로 보았을 때 시간을 효율적으로 사용하기 위해서는 습득한 지식을 미래에도 계속 활용할 수 있는 시스템을 갖춰야 한다. 제텔카스텐은 원리 &amp; 팁에 소개한 것처럼 지식을 재활용하고 서로 연결하는 것을 가장 중요시하는 시스템이다.\n작은 단위로 글 쓰기: 지식을 기록하는 이유는 궁극적으로 어딘가에 사용하기 위함인데, 지식 전달을 위해 가장 많이 사용되는 수단은 글일 것이다. 글쓰기는 글의 주제 결정, 자료 조사, 글 작성 등 다양하고 어려운 작업으로 이루어져 있어 한 자리에 앉아 끝내기 위해서는 많은 주의력과 의지력이 필요하다. 제텔카스텐은 이런 글쓰기를 수행 가능한 (Actionable) 단위로 나누어 수행하게 해 주며, 나중에 글을 쓸 때에는 노트를 잘 배치하는 것만으로도 기본적인 글의 뼈대가 완성되기 때문에 좋은 글을 쉽게 완성할 수 있다. 즉 점진적인 bottom-up 방식으로 글을 쓸 수 있게 해 준다.\n\n적용하기Permalink §\n\n논문 읽기에 적용하기: 논문을 잘 읽고 정리하는 방법: 제텔카스텐 활용하기 포스팅에서는 내가 논문을 읽고 제텔카스텐을 활용하여 정리하는 프로세스를 소개하였다.\n\n\n본 포스팅에서는 지식을 저장하기 위한 방법으로 제텔카스텐을 구현하는 방법에 대해 알아보았다. 제텔카스텐은 사용자마다 조금씩 다르게 구성을 하는 경우가 많고, 이를 개선하려는 노력들도 다양하게 시도되고 있다 (Andy Matuschak의 Evergreen Notes가 대표적이다. 제텔카스텐을 실제로 어떻게 구현하는지 궁금하다면 꼭 방문해 보시기를 추천한다). 본 포스팅도 오리지널 제텔카스텐의 세부에 집중하기보다는 전반적인 흐름을 내가 사용하는 방법을 기준으로 소개하였다. 더 자세한 내용에 대해서는 다른 포스팅 (글 목록) 및 참고자료에 있는 &lt;제텔카스텐&gt; 책을 참고해 보는 것을 추천한다.\n참고한 자료Permalink §"},"03_Tip&Tech/02_Devices/Macbook-단축키":{"title":"Macbook 단축키","links":["01_DailyNote/202309/2023-09-16","tags/clippings","tags/macbook"],"tags":["clippings","macbook"],"content":"author:: 마지막 수정:makaza\ndate :: 2023-01-12\nsource:: 단축키\nclipped:: 2023-09-16\npublished::\n#clippings#macbook\n한번씩 기억나지 않는 단축키\n¶ 화면캡쳐 §\ncommand + shift + 3 전체화면 캡쳐\ncommand + shift + 4 지정영역 캡쳐\n¶ 파인더 §\ncommand + shift + g 특정한 경로로 이동하고 싶을 때\n¶ ScanTexter §\noption + a 캡쳐한 영역을 번역\n¶ Yoink §\noption + y 임시저장소 영역 hidden/display"},"03_Tip&Tech/02_Devices/Synology-DS920+":{"title":"Synology DS920+","links":["01_DailyNote/202309/2023-09-16","tags/clippings","tags/homeserver","tags/nas"],"tags":["clippings","homeserver","nas"],"content":"author:: 마지막 수정:makaza\ndate :: 2023-01-02\nsource:: Synology DS920+\nclipped:: 2023-09-16\npublished::\n#clippings#homeserver#nas\nHP Microserver 를 사용하다 어느날 갑자기 서버가 죽어버렸다.\n여러가지 고민끝에 구입한 ds920+ 이다.\n// NAS 사진 //\nTimemachine, Docker, mariadb 를 비롯해서 webdav를 이용해서 다양한 서비스에서 백업이 가능하다.\n// 서비스 화면 캡쳐 이미지 //\n이 사이트도 이번에 알게된 wikijs 를 이용하여 docker 에 올려서 서비스중이다.\n얼마전 ds923+ 가 출시했지만 synology 가 욕을 많이 먹고 있다.\nHW인코딩이 불가해졌기 때문이다. - 난 사용하지 않고 있지만…\n개인용 UPS 를 NAS 앞단에 연결하여 갑작스런 정전에 대비중이다.\n몇몇가지 브랜드가 있지만… 난 그냥 저렴이를 이용중이다.\nDELTA VX-600VA 360W 나중에 로케트 ES7-12 배터리로 유지보수가 가능해서…\n\n\n\nUPS 정보 이미지 출처 (https://www.ssg.com/item/itemView.ssg?itemId=1000026555186)\n\n차후 이 문서를 더 보강하도록 하겠다."},"99_Resource/00_Template/DateTime":{"title":"DateTime","links":[],"tags":[],"content":"{{date}} {{time}}"},"99_Resource/00_Template/EmptyNote":{"title":"EmptyNote","links":[],"tags":[],"content":"\n개요 §\n상세내용 §\n할일 §\n\n 할일\n\n참고사항 §"},"99_Resource/00_Template/dailyNote":{"title":"dailyNote","links":["99_Resource/01_File/랜덤질문-목록"],"tags":["dailynote"],"content":"\n랜덤질문 §\n질문확인\n메모 §\n할 일 §\n\n 할일 1\n 할일 2\n"},"99_Resource/00_Template/meta":{"title":"meta","links":[],"tags":[],"content":""},"99_Resource/01_File/Sample":{"title":"Sample","links":[],"tags":[],"content":"Test File 입니다 §\n이건 테스트야~ §\ntest 파일!!!\n1. stage\n2. commit\n3. push\n\ngithub token §\n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\n주석 §\n\n이것은 주석1 샘플이다.\n\nFootnotes §\n\n\n주석이다. ↩\n\n\n"},"99_Resource/01_File/노트앱-비교":{"title":"노트앱 비교","links":[],"tags":["mindmap","obsidian","plugin"],"content":"Note App §\nGoodNote §\n\n장점\n\n필기의 즐거움\n높은 만족감\n녹음\n\n\n단점\n\n유료\n버전업 요구\n\n\n\nS Note §\nSynology Note §\n\n장점\n\n퀄리티 좋은 앱\n홈서버 저장\n\n\n단점\n\n서버 필요\n디스크 에러시 복구 어려움\n\n\n\nObsidian §\n\n장점\n\n다양한 플러그인\n마크다운\n가벼움\n무료\n\n\n단점\n\n높은 러닝커브\n일부 유료\n\n\n"},"99_Resource/01_File/랜덤질문-목록":{"title":"랜덤질문 목록","links":[],"tags":[],"content":"\n랜덤 리스트 3개 §\nlet docs = dv.pages(&#039;&quot;99_Resource/02_랜덤질문&quot;&#039;);\nlet length = docs.length;\nlet rtnCount = 3;\nlet question = getRandomQuestion(docs, length, rtnCount);\ndv.list(question);\n\nfunction getRandomQuestion(list, max, itemNum) {\n\tlet items = [];\n\tfor (let i=0;i&lt;itemNum;i++) {\n\t\titems.push(list[Math.floor(Math.random() * max)].file.link);\n\t}\nreturn items;\n}\n랜덤질문 리스트 §\nlist from #랜덤질문 \nsort file.name asc"},"99_Resource/01_File/이미지업로드":{"title":"이미지업로드","links":[],"tags":["obsidian","plugin"],"content":"\nimgur 에 업로드된 이미지\n\n![img|300](https://i.imgur.com/PeKBNCN.png) 태그내 앞의 300은 width 사이즈\n\n\n\n"},"99_Resource/02_랜덤질문/30초간-세계의-이목이-당신에게-집중된다면":{"title":"30초간 세계의 이목이 당신에게 집중된다면","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/5년후의-모습은":{"title":"5년후의 모습은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/가장-가보고-싶은-나라와-이유는":{"title":"가장 가보고 싶은 나라와 이유는","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/가장-가지고-싶은-재능은":{"title":"가장 가지고 싶은 재능은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/가장-싫어하는-음식은":{"title":"가장 싫어하는 음식은","links":[],"tags":["랜덤질문"],"content":"\n2023-09-20 21:06\n혐오식품류. 그 외엔 가리지 않고 잘 먹고 있음."},"99_Resource/02_랜덤질문/가장-좋아하는-TV-(OTT-포함)-프로그램은":{"title":"가장 좋아하는 TV (OTT 포함) 프로그램은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/가장-좋아하는-유튜버는":{"title":"가장 좋아하는 유튜버는","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/경제적-자유를-누리지만-그래도-하고싶은-일은":{"title":"경제적 자유를 누리지만 그래도 하고싶은 일은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/내가-추천하는-사람이-대통령이-된다면,-누구이며-그-이유는":{"title":"내가 추천하는 사람이 대통령이 된다면, 누구이며 그 이유는","links":[],"tags":["랜덤질문"],"content":"\n2023-09-18 21:32\n유시민 작가.\n해박한 지식과 정의로움을 가지고 있다고 보이기 때문에."},"99_Resource/02_랜덤질문/다시-선택하고-싶은-직업은":{"title":"다시 선택하고 싶은 직업은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/마지막-외식장소와-음식은":{"title":"마지막 외식장소와 음식은","links":[],"tags":["랜덤질문"],"content":"\n2023-09-19 11:57\n코로나 이후 외식보다는 배달음식이 주류가 되면서 외식은 좀 오래된 듯 하다.\n회사 회식을 제외하고 기억에 남는 가족 외식건은 서서갈비 집에서 소고기 인 것 같다."},"99_Resource/02_랜덤질문/마지막으로-한-거짓말은":{"title":"마지막으로 한 거짓말은","links":[],"tags":["랜덤질문"],"content":"\n작성일시 :: 2023-09-16 20:49\n와… 정말 기억이 나지 않음."},"99_Resource/02_랜덤질문/배우고-싶은것은":{"title":"배우고 싶은것은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/싫어하지만-그래도-사용하는-앱은":{"title":"싫어하지만 그래도 사용하는 앱은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/어디를-가든-항상-가지고-다니는-한-가지":{"title":"어디를 가든 항상 가지고 다니는 한 가지","links":[],"tags":["랜덤질문"],"content":"\n작성일시 :: 2023-09-17 21:14\n\n휴대폰 (갤럭시 폴드3)\n"},"99_Resource/02_랜덤질문/어떻게-기억되기를-원하십니까":{"title":"어떻게 기억되기를 원하십니까","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/왜-사람을-죽이면-안되나":{"title":"왜 사람을 죽이면 안되나","links":[],"tags":["랜덤질문"],"content":"\n작성일시 :: 2023-09-17 20:56\n인간은 사회생활을 하는 존재로 더불어 살아가야하기 때문이다."},"99_Resource/02_랜덤질문/요술램프-지니를-만난다면,-세-가지-소원은":{"title":"요술램프 지니를 만난다면, 세 가지 소원은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/좋아하는-가수-또는-그룹은":{"title":"좋아하는 가수 또는 그룹은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/지금-가장-듣고-싶은-노래는":{"title":"지금 가장 듣고 싶은 노래는","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/최근-가장-긴-시간을-소비하는-앱은":{"title":"최근 가장 긴 시간을 소비하는 앱은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/최근-가장-부러운-사람은":{"title":"최근 가장 부러운 사람은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/최근-가장-즐거웠던-날은":{"title":"최근 가장 즐거웠던 날은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/최근-가장-큰-이슈는":{"title":"최근 가장 큰 이슈는","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/최근-검색한-내용은":{"title":"최근 검색한 내용은","links":[],"tags":["랜덤질문"],"content":"\n2023-09-21 16:41\naxios extension\n캐시기능 검색!"},"99_Resource/02_랜덤질문/최근-본-가장-아름다운-곳은":{"title":"최근 본 가장 아름다운 곳은","links":[],"tags":["랜덤질문"],"content":"\n2023-09-23 11:37\n머리 위 하늘. 가을이라 그런지 높고 푸른하늘이 정말 아름답다."},"99_Resource/02_랜덤질문/최근-충동-구매한-물건은":{"title":"최근 충동 구매한 물건은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/최근-후회되는-행동-혹은-말은":{"title":"최근 후회되는 행동 혹은 말은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/투명인간이-된다면":{"title":"투명인간이 된다면","links":[],"tags":["랜덤질문"],"content":"\n2023-09-22 19:24\n출입금지인 모든곳에 들어가보기!"},"99_Resource/02_랜덤질문/하루-동안-성별을-바뀐다면-가장-하고싶은-것은":{"title":"하루 동안 성별을 바뀐다면 가장 하고싶은 것은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/핸드폰에서-하나의-앱을-삭제해야-한다면":{"title":"핸드폰에서 하나의 앱을 삭제해야 한다면","links":[],"tags":["랜덤질문"],"content":"\n2023-09-19 08:02\n1년 넘게 하고있는 게임. 광전사키우기 ㅜㅜ"},"99_Resource/02_랜덤질문/현재-소지품중-가장-쓸모없는-물건은":{"title":"현재 소지품중 가장 쓸모없는 물건은","links":[],"tags":["랜덤질문"],"content":""},"99_Resource/02_랜덤질문/현재-스마트폰-배경화면은":{"title":"현재 스마트폰 배경화면은","links":[],"tags":["랜덤질문"],"content":""},"advanced/architecture":{"title":"Architecture","links":["configuration","advanced/paths","layout","features/SPA-Routing","advanced/making-plugins"],"tags":[],"content":"Quartz is a static site generator. How does it work?\nThis question is best answered by tracing what happens when a user (you!) runs npx quartz build in the command line:\nOn the server §\n\nAfter running npx quartz build, npm will look at package.json to find the bin entry for quartz which points at ./quartz/bootstrap-cli.mjs.\nThis file has a shebang line at the top which tells npm to execute it using Node.\nbootstrap-cli.mjs is responsible for a few things:\n\nParsing the command-line arguments using yargs.\nTranspiling and bundling the rest of Quartz (which is in Typescript) to regular JavaScript using esbuild. The esbuild configuration here is slightly special as it also handles .scss file imports using esbuild-sass-plugin v2. Additionally, we bundle ‘inline’ client-side scripts (any .inline.ts file) that components declare using a custom esbuild plugin that runs another instance of esbuild which bundles for the browser instead of node. Modules of both types are imported as plain text.\nRunning the local preview server if --serve is set. This starts two servers:\n\nA WebSocket server on port 3001 to handle hot-reload signals. This tracks all inbound connections and sends a ‘rebuild’ message a server-side change is detected (either content or configuration).\nAn HTTP file-server on a user defined port (normally 8080) to serve the actual website files.\n\n\nIf the --serve flag is set, it also starts a file watcher to detect source-code changes (e.g. anything that is .ts, .tsx, .scss, or packager files). On a change, we rebuild the module (step 2 above) using esbuild’s rebuild API which drastically reduces the build times.\nAfter transpiling the main Quartz build module (quartz/build.ts), we write it to a cache file .quartz-cache/transpiled-build.mjs and then dynamically import this using await import(cacheFile). However, we need to be pretty smart about how to bust Node’s import cache so we add a random query string to fake Node into thinking it’s a new module. This does, however, cause memory leaks so we just hope that the user doesn’t hot-reload their configuration too many times in a single session :)) (it leaks about ~350kB memory on each reload). After importing the module, we then invoke it, passing in the command line arguments we parsed earlier along with a callback function to signal the client to refresh.\n\n\nIn build.ts, we start by installing source map support manually to account for the query string cache busting hack we introduced earlier. Then, we start processing content:\n\nClean the output directory.\nRecursively glob all files in the content folder, respecting the .gitignore.\nParse the Markdown files.\n\nQuartz detects the number of threads available and chooses to spawn worker threads if there are &gt;128 pieces of content to parse (rough heuristic). If it needs to spawn workers, it will invoke esbuild again to transpile the worker script quartz/worker.ts. Then, a work-stealing workerpool is then created and batches of 128 files are assigned to workers.\nEach worker (or just the main thread if there is no concurrency) creates a unified parser based off of the plugins defined in the configuration.\nParsing has three steps:\n\nRead the file into a vfile.\nApplied plugin-defined text transformations over the content.\nSlugify the file path and store it in the data for the file. See the page on paths for more details about how path logic works in Quartz (spoiler: its complicated).\nMarkdown parsing using remark-parse (text to mdast).\nApply plugin-defined Markdown-to-Markdown transformations.\nConvert Markdown into HTML using remark-rehype (mdast to hast).\nApply plugin-defined HTML-to-HTML transformations.\n\n\n\n\nFilter out unwanted content using plugins.\nEmit files using plugins.\n\nGather all the static resources (e.g. external CSS, JS modules, etc.) each emitter plugin declares.\nEmitters that emit HTML files do a bit of extra work here as they need to transform the hast produced in the parse step to JSX. This is done using hast-util-to-jsx-runtime with the Preact runtime. Finally, the JSX is rendered to HTML using preact-render-to-string which statically renders the JSX to HTML (i.e. doesn’t care about useState, useEffect, or any other React/Preact interactive bits). Here, we also do a bunch of fun stuff like assemble the page layout from quartz.layout.ts, assemble all the inline scripts that actually get shipped to the client, and all the transpiled styles. The bulk of this logic can be found in quartz/components/renderPage.tsx. Other fun things of note:\n\nCSS is minified and transformed using Lightning CSS to add vendor prefixes and do syntax lowering.\nScripts are split into beforeDOMLoaded and afterDOMLoaded and are inserted in the &lt;head&gt; and &lt;body&gt; respectively.\n\n\nFinally, each emitter plugin is responsible for emitting and writing it’s own emitted files to disk.\n\n\nIf the --serve flag was detected, we also set up another file watcher to detect content changes (only .md files). We keep a content map that tracks the parsed AST and plugin data for each slug and update this on file changes. Newly added or modified paths are rebuilt and added to the content map. Then, all the filters and emitters are run over the resulting content map. This file watcher is debounced with a threshold of 250ms. On success, we send a client refresh signal using the passed in callback function.\n\n\n\nOn the client §\n\nThe browser opens a Quartz page and loads the HTML. The &lt;head&gt; also links to page styles (emitted to public/index.css) and page-critical JS (emitted to public/prescript.js)\nThen, once the body is loaded, the browser loads the non-critical JS (emitted to public/postscript.js)\nOnce the page is done loading, the page will then dispatch a custom synthetic browser event &quot;nav&quot;. This is used so client-side scripts declared by components can ‘setup’ anything that requires access to the page DOM.\n\nIf the enableSPA option is enabled in the configuration, this &quot;nav&quot; event is also fired on any client-navigation to allow for components to unregister and reregister any event handlers and state.\nIf it’s not, we wire up the &quot;nav&quot; event to just be fired a single time after page load to allow for consistency across how state is setup across both SPA and non-SPA contexts.\n\n\n\nThe architecture and design of the plugin system was intentionally left pretty vague here as this is described in much more depth in the guide on making your own plugin."},"advanced/creating-components":{"title":"Creating your own Quartz components","links":["advanced/making-plugins","features/SPA-Routing","configuration"],"tags":[],"content":"\n\n                  \n                  Warning \n                  \n                \nThis guide assumes you have experience writing JavaScript and are familiar with TypeScript.\n\nNormally on the web, we write layout code using HTML which looks something like the following:\n&lt;article&gt;\n  &lt;h1&gt;An article header&lt;/h1&gt;\n  &lt;p&gt;Some content&lt;/p&gt;\n&lt;/article&gt;\nThis piece of HTML represents an article with a leading header that says “An article header” and a paragraph that contains the text “Some content”. This is combined with CSS to style the page and JavaScript to add interactivity.\nHowever, HTML doesn’t let you create reusable templates. If you wanted to create a new page, you would need to copy and paste the above snippet and edit the header and content yourself. This isn’t great if we have a lot of content on our site that shares a lot of similar layout. The smart people who created React also had similar complaints and invented the concept of Components — JavaScript functions that return JSX — to solve the code duplication problem.\nIn effect, components allow you to write a JavaScript function that takes some data and produces HTML as an output. While Quartz doesn’t use React, it uses the same component concept to allow you to easily express layout templates in your Quartz site.\nAn Example Component §\nConstructor §\nComponent files are written in .tsx files that live in the quartz/components folder. These are re-exported in quartz/components/index.ts so you can use them in layouts and other components more easily.\nEach component file should have a default export that satisfies the QuartzComponentConstructor function signature. It’s a function that takes in a single optional parameter opts and returns a Quartz Component. The type of the parameters opts is defined by the interface Options which you as the component creator also decide.\nIn your component, you can use the values from the configuration option to change the rendering behaviour inside of your component. For example, the component in the code snippet below will not render if the favouriteNumber option is below 0.\ninterface Options {\n  favouriteNumber: number\n}\n \nconst defaultOptions: Options = {\n  favouriteNumber: 42,\n}\n \nexport default ((userOpts?: Options) =&gt; {\n  const opts = { ...userOpts, ...defaultOpts }\n  function YourComponent(props: QuartzComponentProps) {\n    if (opts.favouriteNumber &lt; 0) {\n      return null\n    }\n \n    return &lt;p&gt;My favourite number is {opts.favouriteNumber}&lt;/p&gt;\n  }\n \n  return YourComponent\n}) satisfies QuartzComponentConstructor\nProps §\nThe Quartz component itself (lines 11-17 highlighted above) looks like a React component. It takes in properties (sometimes called props) and returns JSX.\nAll Quartz components accept the same set of props:\nquartz/components/types.ts// simplified for sake of demonstration\nexport type QuartzComponentProps = {\n  fileData: QuartzPluginData\n  cfg: GlobalConfiguration\n  tree: Node&lt;QuartzPluginData&gt;\n  allFiles: QuartzPluginData[]\n  displayClass?: &quot;mobile-only&quot; | &quot;desktop-only&quot;\n}\n\nfileData: Any metadata plugins may have added to the current page.\n\nfileData.slug: slug of the current page.\nfileData.frontmatter: any frontmatter parsed.\n\n\ncfg: The configuration field in quartz.config.ts.\ntree: the resulting HTML AST after processing and transforming the file. This is useful if you’d like to render the content using hast-util-to-jsx-runtime (you can find an example of this in quartz/components/pages/Content.tsx).\nallFiles: Metadata for all files that have been parsed. Useful for doing page listings or figuring out the overall site structure.\ndisplayClass: a utility class that indicates a preference from the user about how to render it in a mobile or desktop setting. Helpful if you want to conditionally hide a component on mobile or desktop.\n\nStyling §\nQuartz components can also define a .css property on the actual function component which will get picked up by Quartz. This is expected to be a CSS string which can either be inlined or imported from a .scss file.\nNote that inlined styles must be plain vanilla CSS:\nquartz/components/YourComponent.tsxexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;p class=&quot;red-text&quot;&gt;Example Component&lt;/p&gt;\n  }\n \n  YourComponent.css = `\n  p.red-text {\n    color: red;\n  }\n  `\n \n  return YourComponent\n}) satisfies QuartzComponentConstructor\nImported styles, however, can be from SCSS files:\nquartz/components/YourComponent.tsx// assuming your stylesheet is in quartz/components/styles/YourComponent.scss\nimport styles from &quot;./styles/YourComponent.scss&quot;\n \nexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;p&gt;Example Component&lt;/p&gt;\n  }\n \n  YourComponent.css = styles\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Warning \n                  \n                \nQuartz does not use CSS modules so any styles you declare here apply globally. If you only want it to apply to your component, make sure you use specific class names and selectors.\n\nScripts and Interactivity §\nWhat about interactivity? Suppose you want to add an-click handler for example. Like the .css property on the component, you can also declare .beforeDOMLoaded and .afterDOMLoaded properties that are strings that contain the script.\nquartz/components/YourComponent.tsxexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;button id=&quot;btn&quot;&gt;Click me&lt;/button&gt;\n  }\n \n  YourComponent.beforeDOM = `\n  console.log(&quot;hello from before the page loads!&quot;)\n  `\n \n  YourComponent.afterDOM = `\n  document.getElementById(&#039;btn&#039;).onclick = () =&gt; {\n    alert(&#039;button clicked!&#039;)\n  }\n  `\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Tip \n                  \n                \nFor those coming from React, Quartz components are different from React components in that it only uses JSX for templating and layout. Hooks like useEffect, useState, etc. are not rendered and other properties that accept functions like onClick handlers will not work. Instead, do it using a regular JS script that modifies the DOM element directly.\n\nAs the names suggest, the .beforeDOMLoaded scripts are executed before the page is done loading so it doesn’t have access to any elements on the page. This is mostly used to prefetch any critical data.\nThe .afterDOMLoaded script executes once the page has been completely loaded. This is a good place to setup anything that should last for the duration of a site visit (e.g. getting something saved from local storage).\nIf you need to create an afterDOMLoaded script that depends on page specific elements that may change when navigating to a new page, you can listen for the &quot;nav&quot; event that gets fired whenever a page loads (which may happen on navigation if SPA Routing is enabled).\ndocument.addEventListener(&quot;nav&quot;, () =&gt; {\n  // do page specific logic here\n  // e.g. attach event listeners\n  const toggleSwitch = document.querySelector(&quot;#switch&quot;) as HTMLInputElement\n  toggleSwitch.removeEventListener(&quot;change&quot;, switchTheme)\n  toggleSwitch.addEventListener(&quot;change&quot;, switchTheme)\n})\nIt is best practice to also unmount any existing event handlers to prevent memory leaks.\nImporting Code §\nOf course, it isn’t always practical (nor desired!) to write your code as a string literal in the component.\nQuartz supports importing component code through .inline.ts files.\nquartz/components/YourComponent.tsx// @ts-ignore: typescript doesn&#039;t know about our inline bundling system\n// so we need to silence the error\nimport script from &quot;./scripts/graph.inline&quot;\n \nexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;button id=&quot;btn&quot;&gt;Click me&lt;/button&gt;\n  }\n \n  YourComponent.afterDOM = script\n  return YourComponent\n}) satisfies QuartzComponentConstructor\nquartz/components/scripts/graph.inline.ts// any imports here are bundled for the browser\nimport * as d3 from &quot;d3&quot;\n \ndocument.getElementById(&quot;btn&quot;).onclick = () =&gt; {\n  alert(&quot;button clicked!&quot;)\n}\nAdditionally, like what is shown in the example above, you can import packages in .inline.ts files. This will be bundled by Quartz and included in the actual script.\nUsing a Component §\nAfter creating your custom component, re-export it in quartz/components/index.ts:\nquartz/components/index.tsimport ArticleTitle from &quot;./ArticleTitle&quot;\nimport Content from &quot;./pages/Content&quot;\nimport Darkmode from &quot;./Darkmode&quot;\nimport YourComponent from &quot;./YourComponent&quot;\n \nexport { ArticleTitle, Content, Darkmode, YourComponent }\nThen, you can use it like any other component in quartz.layout.ts via Component.YourComponent(). See the layout section for more details.\nAs Quartz components are just functions that return React components, you can compositionally use them in other Quartz components.\nquartz/components/AnotherComponent.tsximport YourComponent from &quot;./YourComponent&quot;\n \nexport default (() =&gt; {\n  function AnotherComponent(props: QuartzComponentProps) {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;It&#039;s nested!&lt;/p&gt;\n        &lt;YourComponent {...props} /&gt;\n      &lt;/div&gt;\n    )\n  }\n \n  return AnotherComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Tip \n                  \n                \nLook in quartz/components for more examples of components in Quartz as reference for your own components!\n"},"advanced/index":{"title":"Advanced","links":[],"tags":[],"content":""},"advanced/making-plugins":{"title":"Making your own plugins","links":["build","configuration","advanced/paths","features/Latex","advanced/creating-components"],"tags":[],"content":"\n\n                  \n                  Warning \n                  \n                \nThis part of the documentation will assume you have working knowledge in TypeScript and will include code snippets that describe the interface of what Quartz plugins should look like.\n\nQuartz’s plugins are a series of transformations over content. This is illustrated in the diagram of the processing pipeline below:\n\nAll plugins are defined as a function that takes in a single parameter for options type OptionType = object | undefined and return an object that corresponds to the type of plugin it is.\ntype OptionType = object | undefined\ntype QuartzPlugin&lt;Options extends OptionType = undefined&gt; = (opts?: Options) =&gt; QuartzPluginInstance\ntype QuartzPluginInstance =\n  | QuartzTransformerPluginInstance\n  | QuartzFilterPluginInstance\n  | QuartzEmitterPluginInstance\nThe following sections will go into detail for what methods can be implemented for each plugin type. Before we do that, let’s clarify a few more ambiguous types:\n\nBuildCtx is defined in quartz/ctx.ts. It consists of\n\nargv: The command line arguments passed to the Quartz build command\ncfg: The full Quartz configuration\nallSlugs: a list of all the valid content slugs (see paths for more information on what a ServerSlug is)\n\n\nStaticResources is defined in quartz/resources.tsx. It consists of\n\ncss: a list of URLs for stylesheets that should be loaded\njs: a list of scripts that should be loaded. A script is described with the JSResource type which is also defined in quartz/resources.tsx. It allows you to define a load time (either before or after the DOM has been loaded), whether it should be a module, and either the source URL or the inline content of the script.\n\n\n\nTransformers §\nTransformers map over content, taking a Markdown file and outputting modified content or adding metadata to the file itself.\nexport type QuartzTransformerPluginInstance = {\n  name: string\n  textTransform?: (ctx: BuildCtx, src: string | Buffer) =&gt; string | Buffer\n  markdownPlugins?: (ctx: BuildCtx) =&gt; PluggableList\n  htmlPlugins?: (ctx: BuildCtx) =&gt; PluggableList\n  externalResources?: (ctx: BuildCtx) =&gt; Partial&lt;StaticResources&gt;\n}\nAll transformer plugins must define at least a name field to register the plugin and a few optional functions that allow you to hook into various parts of transforming a single Markdown file.\n\ntextTransform performs a text-to-text transformation before a file is parsed into the Markdown AST.\nmarkdownPlugins defines a list of remark plugins. remark is a tool that transforms Markdown to Markdown in a structured way.\nhtmlPlugins defines a list of rehype plugins. Similar to how remark works, rehype is a tool that transforms HTML to HTML in a structured way.\nexternalResources defines any external resources the plugin may need to load on the client-side for it to work properly.\n\nNormally for both remark and rehype, you can find existing plugins that you can use to . If you’d like to create your own remark or rehype plugin, checkout the guide to creating a plugin using unified (the underlying AST parser and transformer library).\nA good example of a transformer plugin that borrows from the remark and rehype ecosystems is the Latex plugin:\nquartz/plugins/transformers/latex.tsimport remarkMath from &quot;remark-math&quot;\nimport rehypeKatex from &quot;rehype-katex&quot;\nimport rehypeMathjax from &quot;rehype-mathjax/svg.js&quot;\nimport { QuartzTransformerPlugin } from &quot;../types&quot;\n \ninterface Options {\n  renderEngine: &quot;katex&quot; | &quot;mathjax&quot;\n}\n \nexport const Latex: QuartzTransformerPlugin&lt;Options&gt; = (opts?: Options) =&gt; {\n  const engine = opts?.renderEngine ?? &quot;katex&quot;\n  return {\n    name: &quot;Latex&quot;,\n    markdownPlugins() {\n      return [remarkMath]\n    },\n    htmlPlugins() {\n      if (engine === &quot;katex&quot;) {\n        // if you need to pass options into a plugin, you\n        // can use a tuple of [plugin, options]\n        return [[rehypeKatex, { output: &quot;html&quot; }]]\n      } else {\n        return [rehypeMathjax]\n      }\n    },\n    externalResources() {\n      if (engine === &quot;katex&quot;) {\n        return {\n          css: [&quot;https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css&quot;],\n          js: [\n            {\n              src: &quot;https://cdn.jsdelivr.net/npm/katex@0.16.7/dist/contrib/copy-tex.min.js&quot;,\n              loadTime: &quot;afterDOMReady&quot;,\n              contentType: &quot;external&quot;,\n            },\n          ],\n        }\n      } else {\n        return {}\n      }\n    },\n  }\n}\nAnother common thing that transformer plugins will do is parse a file and add extra data for that file:\nexport const AddWordCount: QuartzTransformerPlugin = () =&gt; {\n  return {\n    name: &quot;AddWordCount&quot;,\n    markdownPlugins() {\n      return [\n        () =&gt; {\n          return (tree, file) =&gt; {\n            // tree is an `mdast` root element\n            // file is a `vfile`\n            const text = file.value\n            const words = text.split(&quot; &quot;).length\n            file.data.wordcount = words\n          }\n        },\n      ]\n    },\n  }\n}\n \n// tell typescript about our custom data fields we are adding\n// other plugins will then also be aware of this data field\ndeclare module &quot;vfile&quot; {\n  interface DataMap {\n    wordcount: number\n  }\n}\nFinally, you can also perform transformations over Markdown or HTML ASTs using the visit function from the unist-util-visit package or the findAndReplace function from the mdast-util-find-and-replace package.\nexport const TextTransforms: QuartzTransformerPlugin = () =&gt; {\n  return {\n    name: &quot;TextTransforms&quot;,\n    markdownPlugins() {\n      return [() =&gt; {\n        return (tree, file) =&gt; {\n          // replace _text_ with the italics version\n          findAndReplace(tree, /_(.+)_/, (_value: string, ...capture: string[]) =&gt; {\n            // inner is the text inside of the () of the regex\n            const [inner] = capture\n            // return an mdast node\n            // https://github.com/syntax-tree/mdast\n            return {\n              type: &quot;emphasis&quot;,\n              children: [{ type: &#039;text&#039;, value: inner }]\n            }\n          })\n \n         // remove all links (replace with just the link content)\n         // match by &#039;type&#039; field on an mdast node\n         // https://github.com/syntax-tree/mdast#link in this example\n          visit(tree, &quot;link&quot;, (link: Link) =&gt; {\n            return {\n              type: &quot;paragraph&quot;\n              children: [{ type: &#039;text&#039;, value: link.title }]\n            }\n          })\n        }\n      }]\n    }\n  }\n}\nAll transformer plugins can be found under quartz/plugins/transformers. If you decide to write your own transformer plugin, don’t forget to re-export it under quartz/plugins/transformers/index.ts\nA parting word: transformer plugins are quite complex so don’t worry if you don’t get them right away. Take a look at the built in transformers and see how they operate over content to get a better sense for how to accomplish what you are trying to do.\nFilters §\nFilters filter content, taking the output of all the transformers and determining what files to actually keep and what to discard.\nexport type QuartzFilterPlugin&lt;Options extends OptionType = undefined&gt; = (\n  opts?: Options,\n) =&gt; QuartzFilterPluginInstance\n \nexport type QuartzFilterPluginInstance = {\n  name: string\n  shouldPublish(ctx: BuildCtx, content: ProcessedContent): boolean\n}\nA filter plugin must define a name field and a shouldPublish function that takes in a piece of content that has been processed by all the transformers and returns a true or false depending on whether it should be passed to the emitter plugins or not.\nFor example, here is the built-in plugin for removing drafts:\nquartz/plugins/filters/draft.tsimport { QuartzFilterPlugin } from &quot;../types&quot;\n \nexport const RemoveDrafts: QuartzFilterPlugin&lt;{}&gt; = () =&gt; ({\n  name: &quot;RemoveDrafts&quot;,\n  shouldPublish(_ctx, [_tree, vfile]) {\n    // uses frontmatter parsed from transformers\n    const draftFlag: boolean = vfile.data?.frontmatter?.draft ?? false\n    return !draftFlag\n  },\n})\nEmitters §\nEmitters reduce over content, taking in a list of all the transformed and filtered content and creating output files.\nexport type QuartzEmitterPlugin&lt;Options extends OptionType = undefined&gt; = (\n  opts?: Options,\n) =&gt; QuartzEmitterPluginInstance\n \nexport type QuartzEmitterPluginInstance = {\n  name: string\n  emit(\n    ctx: BuildCtx,\n    content: ProcessedContent[],\n    resources: StaticResources,\n    emitCallback: EmitCallback,\n  ): Promise&lt;FilePath[]&gt;\n  getQuartzComponents(ctx: BuildCtx): QuartzComponent[]\n}\nAn emitter plugin must define a name field an emit function and a getQuartzComponents function. emit is responsible for looking at all the parsed and filtered content and then appropriately creating files and returning a list of paths to files the plugin created.\nCreating new files can be done via regular Node fs module (i.e. fs.cp or fs.writeFile) or via the emitCallback if you are creating files that contain text. The emitCallback function is the 4th argument of the emit function. It’s interface looks something like this:\nexport type EmitCallback = (data: {\n  // the name of the file to emit (not including the file extension)\n  slug: ServerSlug\n  // the file extension\n  ext: `.${string}` | &quot;&quot;\n  // the file content to add\n  content: string\n}) =&gt; Promise&lt;FilePath&gt;\nThis is a thin wrapper around writing to the appropriate output folder and ensuring that intermediate directories exist. If you choose to use the native Node fs APIs, ensure you emit to the argv.output folder as well.\nIf you are creating an emitter plugin that needs to render components, there are three more things to be aware of:\n\nYour component should use getQuartzComponents to declare a list of QuartzComponents that it uses to construct the page. See the page on creating components for more information.\nYou can use the renderPage function defined in quartz/components/renderPage.tsx to render Quartz components into HTML.\nIf you need to render an HTML AST to JSX, you can use the toJsxRuntime function from hast-util-to-jsx-runtime library. An example of this can be found in quartz/components/pages/Content.tsx.\n\nFor example, the following is a simplified version of the content page plugin that renders every single page.\nquartz/plugins/emitters/contentPage.tsxexport const ContentPage: QuartzEmitterPlugin = () =&gt; {\n  // construct the layout\n  const layout: FullPageLayout = {\n    ...sharedPageComponents,\n    ...defaultContentPageLayout,\n    pageBody: Content(),\n  }\n  const { head, header, beforeBody, pageBody, left, right, footer } = layout\n  return {\n    name: &quot;ContentPage&quot;,\n    getQuartzComponents() {\n      return [head, ...header, ...beforeBody, pageBody, ...left, ...right, footer]\n    },\n    async emit(ctx, content, resources, emit): Promise&lt;FilePath[]&gt; {\n      const cfg = ctx.cfg.configuration\n      const fps: FilePath[] = []\n      const allFiles = content.map((c) =&gt; c[1].data)\n      for (const [tree, file] of content) {\n        const slug = canonicalizeServer(file.data.slug!)\n        const externalResources = pageResources(slug, resources)\n        const componentData: QuartzComponentProps = {\n          fileData: file.data,\n          externalResources,\n          cfg,\n          children: [],\n          tree,\n          allFiles,\n        }\n \n        const content = renderPage(slug, componentData, opts, externalResources)\n        const fp = await emit({\n          content,\n          slug: file.data.slug!,\n          ext: &quot;.html&quot;,\n        })\n \n        fps.push(fp)\n      }\n      return fps\n    },\n  }\n}\nNote that it takes in a FullPageLayout as the options. It’s made by combining a SharedLayout and a PageLayout both of which are provided through the quartz.layout.ts file.\n\n\n                  \n                  Tip \n                  \n                \nLook in quartz/plugins for more examples of plugins in Quartz as reference for your own plugins!\n"},"advanced/paths":{"title":"Paths in Quartz","links":[],"tags":[],"content":"Paths are pretty complex to reason about because, especially for a static site generator, they can come from so many places.\nA full file path to a piece of content? Also a path. What about a slug for a piece of content? Yet another path.\nIt would be silly to type these all as string and call it a day as it’s pretty common to accidentally mistake one type of path for another. Unfortunately, TypeScript does not have nominal types for type aliases meaning even if you made custom types of a server-side slug or a client-slug slug, you can still accidentally assign one to another and TypeScript wouldn’t catch it.\nLuckily, we can mimic nominal typing using brands.\n// instead of\ntype FullSlug = string\n \n// we do\ntype FullSlug = string &amp; { __brand: &quot;full&quot; }\n \n// that way, the following will fail typechecking\nconst slug: FullSlug = &quot;some random string&quot;\nWhile this prevents most typing mistakes within our nominal typing system (e.g. mistaking a server slug for a client slug), it doesn’t prevent us from accidentally mistaking a string for a client slug when we forcibly cast it.\nThus, we still need to be careful when casting from a string to one of these nominal types in the ‘entrypoints’, illustrated with hexagon shapes in the diagram below.\nThe following diagram draws the relationships between all the path sources, nominal path types, and what functions in quartz/path.ts convert between them.\ngraph LR\n    Browser{{Browser}} --&gt; Window{{Body}} &amp; LinkElement{{Link Element}}\n    Window --&quot;getFullSlug()&quot;--&gt; FullSlug[Full Slug]\n    LinkElement --&quot;.href&quot;--&gt; Relative[Relative URL]\n    FullSlug --&quot;simplifySlug()&quot; --&gt; SimpleSlug[Simple Slug]\n    SimpleSlug --&quot;pathToRoot()&quot;--&gt; Relative\n    SimpleSlug --&quot;resolveRelative()&quot; --&gt; Relative\n    MD{{Markdown File}} --&gt; FilePath{{File Path}} &amp; Links[Markdown links]\n    Links --&quot;transformLink()&quot;--&gt; Relative\n    FilePath --&quot;slugifyFilePath()&quot;--&gt; FullSlug[Full Slug]\n    style FullSlug stroke-width:4px\n\nHere are the main types of slugs with a rough description of each type of path:\n\nFilePath: a real file path to a file on disk. Cannot be relative and must have a file extension.\nFullSlug: cannot be relative and may not have leading or trailing slashes. It can have index as it’s last segment. Use this wherever possible is it’s the most ‘general’ interpretation of a slug.\nSimpleSlug: cannot be relative and shouldn’t have /index as an ending or a file extension. It can however have a trailing slash to indicate a folder path.\nRelativeURL: must start with . or .. to indicate it’s a relative URL. Shouldn’t have /index as an ending or a file extension but can contain a trailing slash.\n\nTo get a clearer picture of how these relate to each other, take a look at the path tests in quartz/path.test.ts."},"authoring-content":{"title":"Authoring Content","links":["","build","features/callouts","features/wikilinks","features/private-pages"],"tags":[],"content":"All of the content in your Quartz should go in the /content folder. The content for the home page of your Quartz lives in content/index.md. If you’ve setup Quartz already, this folder should already be initailized. Any Markdown in this folder will get processed by Quartz.\nIt is recommended that you use Obsidian as a way to edit and maintain your Quartz. It comes with a nice editor and graphical interface to preview, edit, and link your local files and attachments.\nGot everything setup? Let’s build and preview your Quartz locally!\nSyntax §\nAs Quartz uses Markdown files as the main way of writing content, it fully supports Markdown syntax. By default, Quartz also ships with a few syntax extensions like Github Flavored Markdown (footnotes, strikethrough, tables, tasklists) and Obsidian Flavored Markdown (callouts, wikilinks).\nAdditionally, Quartz also allows you to specify additional metadata in your notes called frontmatter.\ncontent/note.md---\ntitle: Example Title\ndraft: false\ntags:\n  - example-tag\n---\n \nThe rest of your content lives here. You can use **Markdown** here :)\nSome common frontmatter fields that are natively supported by Quartz:\n\ntitle: Title of the page. If it isn’t provided, Quartz will use the name of the file as the title.\naliases: Other names for this note. This is a list of strings.\ndraft: Whether to publish the page or not. This is one way to make pages private in Quartz.\ndate: A string representing the day the note was published. Normally uses YYYY-MM-DD format.\n\nSyncing your Content §\nWhen your Quartz is at a point you’re happy with, you can save your changes to GitHub by doing npx quartz sync.\n\n\n                  \n                  Flags and options \n                  \n                \nFor full help options, you can run npx quartz sync --help.\nMost of these have sensible defaults but you can override them if you have a custom setup:\n\n-d or --directory: the content folder. This is normally just content\n-v or --verbose: print out extra logging information\n--commit or --no-commit: whether to make a git commit for your changes\n--push or --no-push: whether to push updates to your GitHub fork of Quartz\n--pull or --no-pull: whether to try and pull in any updates from your GitHub fork (i.e. from other devices) before pushing\n\n"},"build":{"title":"Building your Quartz","links":[""],"tags":[],"content":"Once you’ve initialized Quartz, let’s see what it looks like locally:\nnpx quartz build --serve\nThis will start a local web server to run your Quartz on your computer. Open a web browser and visit http://localhost:8080/ to view it.\n\n\n                  \n                  Flags and options \n                  \n                \nFor full help options, you can run npx quartz build --help.\nMost of these have sensible defaults but you can override them if you have a custom setup:\n\n-d or --directory: the content folder. This is normally just content\n-v or --verbose: print out extra logging information\n-o or --output: the output folder. This is normally just public\n--serve: run a local hot-reloading server to preview your Quartz\n--port: what port to run the local preview server on\n--concurrency: how many threads to use to parse notes\n\n"},"configuration":{"title":"Configuration","links":["layout","features/RSS-Feed","features/SPA-Routing","features/popover-previews","hosting","features/private-pages","features/graph-view","features/syntax-highlighting","advanced/making-plugins","features/Latex"],"tags":[],"content":"Quartz is meant to be extremely configurable, even if you don’t know any coding. Most of the configuration you should need can be done by just editing quartz.config.ts or changing the layout in quartz.layout.ts.\n\n\n                  \n                  Tip \n                  \n                \nIf you edit Quartz configuration using a text-editor that has TypeScript language support like VSCode, it will warn you when you you’ve made an error in your configuration, helping you avoid configuration mistakes!\n\nThe configuration of Quartz can be broken down into two main parts:\nquartz.config.tsconst config: QuartzConfig = {\n  configuration: { ... },\n  plugins: { ... },\n}\nGeneral Configuration §\nThis part of the configuration concerns anything that can affect the whole site. The following is a list breaking down all the things you can configure:\n\npageTitle: title of the site. This is also used when generating the RSS Feed for your site.\nenableSPA: whether to enable SPA Routing on your site.\nenablePopovers: whether to enable popover previews on your site.\nanalytics: what to use for analytics on your site. Values can be\n\nnull: don’t use analytics;\n{ provider: &#039;plausible&#039; }: use Plausible, a privacy-friendly alternative to Google Analytics; or\n{ provider: &#039;google&#039;, tagId: &lt;your-google-tag&gt; }: use Google Analytics\n\n\nbaseUrl: this is used for sitemaps and RSS feeds that require an absolute URL to know where the canonical ‘home’ of your site lives. This is normally the deployed URL of your site (e.g. quartz.jzhao.xyz for this site). Do not include the protocol (i.e. https://) or any leading or trailing slashes.\n\nThis should also include the subpath if you are hosting on GitHub pages without a custom domain. For example, if my repository is jackyzha0/quartz, GitHub pages would deploy to https://jackyzha0.github.io/quartz and the baseUrl would be jackyzha0.github.io/quartz\nNote that Quartz 4 will avoid using this as much as possible and use relative URLs whenever it can to make sure your site works no matter where you end up actually deploying it.\n\n\nignorePatterns: a list of glob patterns that Quartz should ignore and not search through when looking for files inside the content folder. See private pages for more details.\ndefaultDateType: whether to use created, modified, or published as the default date to display on pages and page listings.\ntheme: configure how the site looks.\n\ntypography: what fonts to use. Any font available on Google Fonts works here.\n\nheader: Font to use for headers\ncode: Font for inline and block quotes.\nbody: Font for everything\n\n\ncolors: controls the theming of the site.\n\nlight: page background\nlightgray: borders\ngray: graph links, heavier borders\ndarkgray: body text\ndark: header text and icons\nsecondary: link colour, current graph node\ntertiary: hover states and visited graph nodes\nhighlight: internal link background, highlighted text, highlighted lines of code\n\n\n\n\n\nPlugins §\nYou can think of Quartz plugins as a series of transformations over content.\n\nplugins: {\n  transformers: [...],\n  filters: [...],\n  emitters: [...],\n}\n\nTransformers map over content (e.g. parsing frontmatter, generating a description)\nFilters filter content (e.g. filtering out drafts)\nEmitters reduce over content (e.g. creating an RSS feed or pages that list all files with a specific tag)\n\nBy adding, removing, and reordering plugins from the tranformers, filters, and emitters fields, you can customize the behaviour of Quartz.\n\n\n                  \n                  Note \n                  \n                \nEach node is modified by every transformer in order. Some transformers are position-sensitive so you may need to take special note of whether it needs come before or after any other particular plugins.\n\nAdditionally, plugins may also have their own configuration settings that you can pass in. For example, the Latex plugin allows you to pass in a field specifying the renderEngine to choose between Katex and MathJax.\ntransformers: [\n  Plugin.FrontMatter(), // uses default options\n  Plugin.Latex({ renderEngine: &quot;katex&quot; }), // specify some options\n]\nIf you’d like to make your own plugins, read the guide on making plugins for more information."},"features/Latex":{"title":"Latex","links":[],"tags":["plugin/transformer"],"content":"Quartz uses Katex by default to typeset both inline and block math expressions at build time.\nSyntax §\nBlock Math §\nBlock math can be rendered by delimiting math expression with $$.\n$$\nf(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi\n$$\n\nf(x)=∫−∞∞​f(^​ξ),e2πiξxdξ\na​=b+c=e+f​\n[1a​2b​3c​]\nInline Math §\nSimilarly, inline math can be rendered by delimiting math expression with a single $. For example, $e^{i\\pi} = -1$ produces eiπ=−1\nEscaping symbols §\nThere will be cases where you may have more than one $ in a paragraph at once which may accidentally trigger MathJax/Katex.\nTo get around this, you can escape the dollar sign by doing \\$ instead.\nFor example:\n\nIncorrect: I have $1 and you have $2 produces I have 1andyouhave2\nCorrect: I have \\$1 and you have \\$2 produces I have $1 and you have $2\n\nMathJax §\nIn quartz.config.ts, you can configure Quartz to use MathJax SVG rendering by replacing Plugin.Latex({ renderEngine: &#039;katex&#039; }) with Plugin.Latex({ renderEngine: &#039;mathjax&#039; })\nCustomization §\n\nRemoving Latex support: remove all instances of Plugin.Latex() from quartz.config.ts.\nPlugin: quartz/plugins/transformers/latex.ts\n"},"features/Mermaid-diagrams":{"title":"Mermaid diagrams","links":["features/Obsidian-compatibility"],"tags":[],"content":"Quartz supports Mermaid which allows you to add diagrams and charts to your notes. Mermaid supports a range of diagrams, such as flow charts, sequence diagrams, and timelines. This is enabled as a part of Obsidian compatibility and can be configured and enabled/disabled from that plugin.\nBy default, Quartz will render Mermaid diagrams to match the site theme.\n\n\n                  \n                  Warning \n                  \n                \nWondering why Mermaid diagrams may not be showing up even if you have them enabled? You may need to reorder your plugins so that Plugin.ObsidianFlavoredMarkdown() is after Plugin.SyntaxHighlighting().\n\nSyntax §\nTo add a Mermaid diagram, create a mermaid code block.\n```mermaid\nsequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n```\n\nsequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n"},"features/Obsidian-compatibility":{"title":"Obsidian compatibility","links":["features/wikilinks","features/Mermaid-diagrams","features/callouts"],"tags":["plugin/transformer"],"content":"Quartz was originally designed as a tool to publish Obsidian vaults as websites. Even as the scope of Quartz has widened over time, it hasn’t lost the ability to seamlessly interoperate with Obsidian.\nBy default, Quartz ships with Plugin.ObsidianFlavoredMarkdown which is a transformer plugin that adds support for Obsidian Flavored Markdown. This includes support for features like wikilinks and Mermaid diagrams.\nIt also ships with support for frontmatter parsing with the same fields that Obsidian uses through the Plugin.FrontMatter transformer plugin.\nFinally, Quartz also provides Plugin.CrawlLinks which allows you to customize Quartz’s link resolution behaviour to match Obsidian.\nConfiguration §\n\nFrontmatter parsing:\n\nDisabling: remove all instances of Plugin.FrontMatter() from quartz.config.ts.\nCustomize default values for frontmatter: edit quartz/plugins/transformers/frontmatter.ts\n\n\nObsidian Flavored Markdown:\n\nDisabling: remove all instances of Plugin.ObsidianFlavoredMarkdown() from quartz.config.ts\nCustomizing features: Plugin.ObsidianFlavoredMarkdown has several other options to toggle on and off:\n\ncomments: whether to enable %% style Obsidian comments. Defaults to true\nhighlight: whether to enable == style highlights. Defaults to true\nwikilinks: whether to enable turning wikilinks into regular links. Defaults to true\ncallouts: whether to enable callouts. Defaults to true\nmermaid: whether to enable Mermaid diagrams. Defaults to true\nparseTags: whether to try and parse tags in the content body. Defaults to true\nenableInHtmlEmbed: whether to try and parse Obsidian flavoured markdown in raw HTML. Defaults to false\n\n\n\n\nLink resolution behaviour:\n\nDisabling: remove all instances of Plugin.CrawlLinks() from quartz.config.ts\nChanging link resolution preference: set markdownLinkResolution to one of absolute, relative or shortest\n\n\n"},"features/OxHugo-compatibility":{"title":"OxHugo compatibility","links":["advanced/making-plugins","features/wikilinks"],"tags":["plugin/transformer"],"content":"org-roam is a plain-text personal knowledge management system for emacs. ox-hugo is org exporter backend that exports org-mode files to Hugo compatible Markdown.\nBecause the Markdown generated by ox-hugo is not pure Markdown but Hugo specific, we need to transform it to fit into Quartz. This is done by Plugin.OxHugoFlavouredMarkdown. Even though this plugin was written with ox-hugo in mind, it should work for any Hugo specific Markdown.\nquartz.config.tsplugins: {\n  transformers: [\n    Plugin.FrontMatter({ delims: &quot;+++&quot;, language: &quot;toml&quot; }), // if toml frontmatter\n    // ...\n    Plugin.OxHugoFlavouredMarkdown(),\n    Plugin.GitHubFlavoredMarkdown(),\n    // ...\n  ],\n},\nUsage §\nQuartz by default doesn’t understand org-roam files as they aren’t Markdown. You’re responsible for using an external tool like ox-hugo to export the org-roam files as Markdown content to Quartz and managing the static assets so that they’re available in the final output.\nConfiguration §\n\nLink resolution\n\nwikilinks: Whether to replace {{ relref }} with Quartz wikilinks\nremovePredefinedAnchor: Whether to remove pre-defined anchor set by ox-hugo.\n\n\nImage handling\n\nreplaceFigureWithMdImg: Whether to replace &lt;figure/&gt; with ![]()\n\n\nFormatting\n\nremoveHugoShortcode: Whether to remove hugo shortcode syntax ({{}})\n\n\n\n\n\n                  \n                  Warning \n                  \n                \nWhile you can use Plugin.OxHugoFlavoredMarkdown and Plugin.ObsidianFlavoredMarkdown together, it’s not recommended because it might mutate the file in unexpected ways. Use with caution.\n"},"features/RSS-Feed":{"title":"RSS Feed","links":["configuration"],"tags":[],"content":"Quartz creates an RSS feed for all the content on your site by generating an index.xml file that RSS readers can subscribe to. Because of the RSS spec, this requires the baseUrl property in your configuration to be set properly for RSS readers to pick it up properly.\nConfiguration §\n\nRemove RSS feed: set the enableRSS field of Plugin.ContentIndex in quartz.config.ts to be false.\nChange number of entries: set the rssLimit field of Plugin.ContentIndex to be the desired value. It defaults to latest 10 items.\nUse rich HTML output in RSS: set rssFullHtml field of Plugin.ContentIndex to be true.\n"},"features/SPA-Routing":{"title":"SPA Routing","links":["configuration"],"tags":[],"content":"Single-page-app style rendering. This prevents flashes of unstyled content and improves the smoothness of Quartz.\nUnder the hood, this is done by hijacking page navigations and instead fetching the HTML via a GET request and then diffing and selectively replacing parts of the page using micromorph. This allows us to change the content of the page without fully refreshing the page, reducing the amount of content that the browser needs to load.\nConfiguration §\n\nDisable SPA Routing: set the enableSPA field of the configuration in quartz.config.ts to be false.\n"},"features/backlinks":{"title":"Backlinks","links":["features/popover-previews"],"tags":["component"],"content":"A backlink for a note is a link from another note to that note. Links in the backlink pane also feature rich popover previews if you have that feature enabled.\nCustomization §\n\nRemoving backlinks: delete all usages of Component.Backlinks() from quartz.layout.ts.\nComponent: quartz/components/Backlinks.tsx\nStyle: quartz/components/styles/backlinks.scss\nScript: quartz/components/scripts/search.inline.ts\n"},"features/callouts":{"title":"Callouts","links":[],"tags":["plugin/transformer"],"content":"Quartz supports the same Admonition-callout syntax as Obsidian.\nThis includes\n\n12 Distinct callout types (each with several aliases)\nCollapsable callouts\n\n&gt; [!info] Title\n&gt; \n&gt; This is a callout!\n\nSee documentation on supported types and syntax here.\n\n\n                  \n                  Warning \n                  \n                \nWondering why callouts may not be showing up even if you have them enabled? You may need to reorder your plugins so that Plugin.ObsidianFlavoredMarkdown() is after Plugin.SyntaxHighlighting().\n\nCustomization §\n\nDisable callouts: simply pass callouts: false to the plugin: Plugin.ObsidianFlavoredMarkdown({ callouts: false })\nEditing icons: quartz/plugins/transformers/ofm.ts\n\nShowcase §\n\n\n                  \n                  Info \n                  \n                \nDefault title\n\n\n\n                  \n                  Can callouts be nested? \n                  \n                  \n                \n                \n\n\n                  \n                  Yes!, they can. \n                  \n                  \n                \n                \n\n\n                  \n                  You can even use multiple layers of nesting. \n                  \n                \n\n\n\n\n\n                  \n                  Examples \n                  \n                \nAliases: example\n\n\n\n                  \n                  Notes \n                  \n                \nAliases: note\n\n\n\n                  \n                  Summaries \n                  \n                \nAliases: abstract, summary, tldr\n\n\n\n                  \n                  Info \n                  \n                \nAliases: info, todo\n\n\n\n                  \n                  Hint \n                  \n                \nAliases: tip, hint, important\n\n\n\n                  \n                  Success \n                  \n                \nAliases: success, check, done\n\n\n\n                  \n                  Question \n                  \n                \nAliases: question, help, faq\n\n\n\n                  \n                  Warning \n                  \n                \nAliases: warning, caution, attention\n\n\n\n                  \n                  Failure \n                  \n                \nAliases: failure, fail, missing\n\n\n\n                  \n                  Error \n                  \n                \nAliases: danger, error\n\n\n\n                  \n                  Bug \n                  \n                \nAliases: bug\n\n\n\n                  \n                  Quote \n                  \n                \nAliases: quote, cite\n"},"features/darkmode":{"title":"Darkmode","links":[],"tags":["component"],"content":"Quartz supports darkmode out of the box that respects the user’s theme preference. Any future manual toggles of the darkmode switch will be saved in the browser’s local storage so it can be persisted across future page loads.\nCustomization §\n\nRemoving darkmode: delete all usages of Component.Darkmode() from quartz.layout.ts.\nComponent: quartz/components/Darkmode.tsx\nStyle: quartz/components/styles/darkmode.scss\nScript: quartz/components/scripts/darkmode.inline.ts\n"},"features/explorer":{"title":"Explorer","links":["layout","authoring-content","features/table-of-contents"],"tags":["component"],"content":"Quartz features an explorer that allows you to navigate all files and folders on your site. It supports nested folders and is highly customizable.\nBy default, it shows all folders and files on your page. To display the explorer in a different spot, you can edit the layout.\nDisplay names for folders get determined by the title frontmatter field in folder/index.md (more detail in Authoring Content). If this file does not exist or does not contain frontmatter, the local folder name will be used instead.\n\n\n                  \n                  Info \n                  \n                \nThe explorer uses local storage by default to save the state of your explorer. This is done to ensure a smooth experience when navigating to different pages.\nTo clear/delete the explorer state from local storage, delete the fileTree entry (guide on how to delete a key from local storage in chromium based browsers can be found here). You can disable this by passing useSavedState: false as an argument.\n\nCustomization §\nMost configuration can be done by passing in options to Component.Explorer().\nFor example, here’s what the default configuration looks like:\nquartz.layout.tsComponent.Explorer({\n  title: &quot;Explorer&quot;, // title of the explorer component\n  folderClickBehavior: &quot;collapse&quot;, // what happens when you click a folder (&quot;link&quot; to navigate to folder page on click or &quot;collapse&quot; to collapse folder on click)\n  folderDefaultState: &quot;collapsed&quot;, // default state of folders (&quot;collapsed&quot; or &quot;open&quot;)\n  useSavedState: true, // wether to use local storage to save &quot;state&quot; (which folders are opened) of explorer\n  // Sort order: folders first, then files. Sort folders and files alphabetically\n  sortFn: (a, b) =&gt; {\n    ... // default implementation shown later\n  },\n  filterFn: filterFn: (node) =&gt; node.name !== &quot;tags&quot;, // filters out &#039;tags&#039; folder\n  mapFn: undefined,\n  // what order to apply functions in\n  order: [&quot;filter&quot;, &quot;map&quot;, &quot;sort&quot;],\n})\nWhen passing in your own options, you can omit any or all of these fields if you’d like to keep the default value for that field.\nWant to customize it even more?\n\nRemoving table of contents: remove Component.Explorer() from quartz.layout.ts\n\n(optional): After removing the explorer component, you can move the Table of Contents component back to the left part of the layout\n\n\nChanging sort, filter and map behavior: explained in Advanced customization\nComponent:\n\nWrapper (Outer component, generates file tree, etc): quartz/components/Explorer.tsx\nExplorer node (recursive, either a folder or a file): quartz/components/ExplorerNode.tsx\n\n\nStyle: quartz/components/styles/explorer.scss\nScript: quartz/components/scripts/explorer.inline.ts\n\nAdvanced customization §\nThis component allows you to fully customize all of its behavior. You can pass a custom sort, filter and map function.\nAll functions you can pass work with the FileNode class, which has the following properties:\nquartz/components/ExplorerNode.tsxexport class FileNode {\n  children: FileNode[]  // children of current node\n  name: string  // last part of slug\n  displayName: string // what actually should be displayed in the explorer\n  file: QuartzPluginData | null // set if node is a file, see `QuartzPluginData` for more detail\n  depth: number // depth of current node\n \n  ... // rest of implementation\n}\nEvery function you can pass is optional. By default, only a sort function will be used:\nDefault sort function// Sort order: folders first, then files. Sort folders and files alphabetically\nComponent.Explorer({\n  sortFn: (a, b) =&gt; {\n    if ((!a.file &amp;&amp; !b.file) || (a.file &amp;&amp; b.file)) {\n      return a.displayName.localeCompare(b.displayName)\n    }\n    if (a.file &amp;&amp; !b.file) {\n      return 1\n    } else {\n      return -1\n    }\n  },\n})\n\nYou can pass your own functions for sortFn, filterFn and mapFn. All functions will be executed in the order provided by the order option (see Customization). These functions behave similarly to their Array.prototype counterpart, except they modify the entire FileNode tree in place instead of returning a new one.\nFor more information on how to use sort, filter and map, you can check Array.prototype.sort(), Array.prototype.filter() and Array.prototype.map().\nType definitions look like this:\nsortFn: (a: FileNode, b: FileNode) =&gt; number\nfilterFn: (node: FileNode) =&gt; boolean\nmapFn: (node: FileNode) =&gt; void\n\n\n                  \n                  Tip \n                  \n                \nYou can check if a FileNode is a folder or a file like this:\nif (node.file) {\n  // node is a file\n} else {\n  // node is a folder\n}\n\nBasic examples §\nThese examples show the basic usage of sort, map and filter.\nUse sort to put files first §\nUsing this example, the explorer will alphabetically sort everything, but put all files above all folders.\nquartz.layout.tsComponent.Explorer({\n  sortFn: (a, b) =&gt; {\n    if ((!a.file &amp;&amp; !b.file) || (a.file &amp;&amp; b.file)) {\n      return a.displayName.localeCompare(b.displayName)\n    }\n    if (a.file &amp;&amp; !b.file) {\n      return -1\n    } else {\n      return 1\n    }\n  },\n})\nChange display names (map) §\nUsing this example, the display names of all FileNodes (folders + files) will be converted to full upper case.\nquartz.layout.tsComponent.Explorer({\n  mapFn: (node) =&gt; {\n    node.displayName = node.displayName.toUpperCase()\n  },\n})\nRemove list of elements (filter) §\nUsing this example, you can remove elements from your explorer by providing an array of folders/files using the omit set.\nquartz.layout.tsComponent.Explorer({\n  filterFn: (node) =&gt; {\n    // set containing names of everything you want to filter out\n    const omit = new Set([&quot;authoring content&quot;, &quot;tags&quot;, &quot;hosting&quot;])\n    return !omit.has(node.name.toLowerCase())\n  },\n})\nYou can customize this by changing the entries of the omit set. Simply add all folder or file names you want to remove.\nShow every element in explorer §\nTo override the default filter function that removes the tags folder from the explorer, you can set the filter function to undefined.\nquartz.layout.tsComponent.Explorer({\n  filterFn: undefined, // apply no filter function, every file and folder will visible\n})\nAdvanced examples §\nAdd emoji prefix §\nTo add emoji prefixes (📁 for folders, 📄 for files), you could use a map function like this:\nquartz.layout.tsComponent.Explorer({\n  mapFn: (node) =&gt; {\n    // dont change name of root node\n    if (node.depth &gt; 0) {\n      // set emoji for file/folder\n      if (node.file) {\n        node.displayName = &quot;📄 &quot; + node.displayName\n      } else {\n        node.displayName = &quot;📁 &quot; + node.displayName\n      }\n    }\n  },\n}})\nPutting it all together §\nIn this example, we’re going to customize the explorer by using functions from examples above to add emoji prefixes, filter out some folders and sort with files above folders.\nquartz.layout.tsComponent.Explorer({\n  filterFn: sampleFilterFn,\n  mapFn: sampleMapFn,\n  sortFn: sampleSortFn,\n  order: [&quot;filter&quot;, &quot;sort&quot;, &quot;map&quot;],\n})\nNotice how we customized the order array here. This is done because the default order applies the sort function last. While this normally works well, it would cause unintended behavior here, since we changed the first characters of all display names. In our example, sort would be applied based off the emoji prefix instead of the first real character.\nTo fix this, we just changed around the order and apply the sort function before changing the display names in the map function.\n\n\n                  \n                  Tip \n                  \n                \nWhen writing more complicated functions, the layout file can start to look very cramped.\nYou can fix this by defining your functions in another file.\nfunctions.tsimport { Options } from &quot;./quartz/components/ExplorerNode&quot;\nexport const mapFn: Options[&quot;mapFn&quot;] = (node) =&gt; {\n  // implement your function here\n}\nexport const filterFn: Options[&quot;filterFn&quot;] = (node) =&gt; {\n  // implement your function here\n}\nexport const sortFn: Options[&quot;sortFn&quot;] = (a, b) =&gt; {\n  // implement your function here\n}\nYou can then import them like this:\nquartz.layout.tsimport { mapFn, filterFn, sortFn } from &quot;./functions.ts&quot;\nComponent.Explorer({\n  mapFn: mapFn,\n  filterFn: filterFn,\n  sortFn: sortFn,\n})\n"},"features/folder-and-tag-listings":{"title":"Folder and Tag Listings","links":["authoring-content","tags/component","advanced/creating-components"],"tags":["plugin/emitter","component"],"content":"Quartz creates listing pages for any folders and tags you have.\nFolder Listings §\nQuartz will generate an index page for all the pages under that folder. This includes any content that is multiple levels deep.\nAdditionally, Quartz will also generate pages for subfolders. Say you have a note in a nested folder content/abc/def/note.md. Then, Quartz would generate a page for all the notes under abc and a page for all the notes under abc/def.\nBy default, Quartz will title the page Folder: &lt;name of folder&gt; and no description. You can override this by creating an index.md file in the folder with the title frontmatter field. Any content you write in this file will also be used in the description of the folder.\nFor example, for the folder content/posts, you can add another file content/posts/index.md to add a specific description for it.\nTag Listings §\nQuartz will also create an index page for each unique tag in your vault and render a list of all notes with that tag.\nQuartz also supports tag hierarchies as well (e.g. plugin/emitter) and will also render a separate tag page for each layer of the tag hierarchy. It will also create a default global tag index page at /tags that displays a list of all the tags in your Quartz.\nLike folder listings, you can also provide a description and title for a tag page by creating a file for each tag. For example, if you wanted to create a custom description for the#component tag, you would create a file at content/tags/component.md with a title and description.\nCustomization §\nThe layout for both the folder and content pages can be customized. By default, they use the defaultListPageLayout in quartz.layouts.ts. If you’d like to make more involved changes to the layout and don’t mind editing some Quartz components, you can take a look at quartz/components/pages/FolderContent.tsx and quartz/components/pages/TagContent.tsx respectively.\n\nRemoving folder listings: remove Plugin.FolderPage() from emitters in quartz.config.ts\nRemoving tag listings: remove Plugin.TagPage() from emitters in quartz.config.ts\n"},"features/full-text-search":{"title":"Full-text Search","links":["configuration"],"tags":["component"],"content":"Full-text search in Quartz is powered by Flexsearch. It’s fast enough to return search results in under 10ms for Quartzs as large as half a million words.\nIt can be opened by either clicking on the search bar or pressing ⌘/ctrl + K. The top 5 search results are shown on each query. Matching subterms are highlighted and the most relevant 30 words are excerpted. Clicking on a search result will navigate to that page.\nTo search content by tags, you can either press ⌘/ctrl + shift + K or start your query with # (e.g. #components).\nThis component is also keyboard accessible: Tab and Shift+Tab will cycle forward and backward through search results and Enter will navigate to the highlighted result (first result by default). You are also able to navigate search results using ArrowUp and ArrowDown.\n\n\n                  \n                  Info \n                  \n                \nSearch requires the ContentIndex emitter plugin to be present in the configuration.\n\nIndexing Behaviour §\nBy default, it indexes every page on the site with Markdown syntax removed. This means link URLs for instance are not indexed.\nIt properly tokenizes Chinese, Korean, and Japenese characters and constructs separate indexes for the title, content and tags, weighing title matches above content matches.\nCustomization §\n\nRemoving search: delete all usages of Component.Search() from quartz.layout.ts.\nComponent: quartz/components/Search.tsx\nStyle: quartz/components/styles/search.scss\nScript: quartz/components/scripts/search.inline.ts\n\nYou can edit contextWindowWords, numSearchResults or numTagResults to suit your needs\n\n\n"},"features/graph-view":{"title":"Graph View","links":["configuration"],"tags":["component"],"content":"Quartz features a graph-view that can show both a local graph view and a global graph view.\n\nThe local graph view shows files that either link to the current file or are linked from the current file. In other words, it shows all notes that are at most one hop away.\nThe global graph view can be toggled by clicking the graph icon on the top-right of the local graph view. It shows all the notes in your graph and how they connect to each other.\n\nBy default, the node radius is proportional to the total number of incoming and outgoing internal links from that file.\nAdditionally, similar to how browsers highlight visited links a different colour, the graph view will also show nodes that you have visited in a different colour.\n\n\n                  \n                  Info \n                  \n                \nGraph View requires the ContentIndex emitter plugin to be present in the configuration.\n\nCustomization §\nMost configuration can be done by passing in options to Component.Graph().\nFor example, here’s what the default configuration looks like:\nquartz.layout.tsComponent.Graph({\n  localGraph: {\n    drag: true, // whether to allow panning the view around\n    zoom: true, // whether to allow zooming in and out\n    depth: 1, // how many hops of notes to display\n    scale: 1.1, // default view scale\n    repelForce: 0.5, // how much nodes should repel each other\n    centerForce: 0.3, // how much force to use when trying to center the nodes\n    linkDistance: 30, // how long should the links be by default?\n    fontSize: 0.6, // what size should the node labels be?\n    opacityScale: 1, // how quickly do we fade out the labels when zooming out?\n  },\n  globalGraph: {\n    drag: true,\n    zoom: true,\n    depth: -1,\n    scale: 0.9,\n    repelForce: 0.5,\n    centerForce: 0.3,\n    linkDistance: 30,\n    fontSize: 0.6,\n    opacityScale: 1,\n  },\n})\nWhen passing in your own options, you can omit any or all of these fields if you’d like to keep the default value for that field.\nWant to customize it even more?\n\nRemoving graph view: delete all usages of Component.Graph() from quartz.layout.ts.\nComponent: quartz/components/Graph.tsx\nStyle: quartz/components/styles/graph.scss\nScript: quartz/components/scripts/graph.inline.ts\n"},"features/index":{"title":"Feature List","links":[],"tags":[],"content":""},"features/popover-previews":{"title":"Popover Previews","links":["advanced/creating-components"],"tags":[],"content":"Like Wikipedia, when you hover over a link in Quartz, there is a popup of a page preview that you can scroll to see the entire content. Links to headers will also scroll the popup to show that specific header in view.\nBy default, Quartz only fetches previews for pages inside your vault due to CORS. It does this by selecting all HTML elements with the popover-hint class. For most pages, this includes the page title, page metadata like words and time to read, tags, and the actual page content.\nWhen creating your own components, you can include this popover-hint class to also include it in the popover.\nConfiguration §\n\nRemove popovers: set the enablePopovers field in quartz.config.ts to be false.\nStyle: quartz/components/styles/popover.scss\nScript: quartz/components/scripts/popover.inline.ts\n"},"features/private-pages":{"title":"Private Pages","links":["advanced/making-plugins","configuration"],"tags":["plugin/filter"],"content":"There may be some notes you want to avoid publishing as a website. Quartz supports this through two mechanisms which can be used in conjunction:\nFilter Plugins §\nFilter plugins are plugins that filter out content based off of certain criteria. By default, Quartz uses the Plugin.RemoveDrafts plugin which filters out any note that has draft: true in the frontmatter.\nIf you’d like to only publish a select number of notes, you can instead use Plugin.ExplicitPublish which will filter out all notes except for any that have publish: true in the frontmatter.\nignorePatterns §\nThis is a field in quartz.config.ts under the main configuration which allows you to specify a list of patterns to effectively exclude from parsing all together. Any valid glob pattern works here.\nCommon examples include:\n\nsome/folder: exclude the entire of some/folder\n*.md: exclude all files with a .md extension\n!*.md exclude all files that don’t have a .md extension\n**/private: exclude any files or folders named private at any level of nesting\n\n\n\n                  \n                  Warning \n                  \n                \nMarking something as private via either a plugin or through the ignorePatterns pattern will only prevent a page from being included in the final built site. If your GitHub repository is public, also be sure to include an ignore for those in the .gitignore of your Quartz. See the git documentation for more information.\n"},"features/recent-notes":{"title":"Recent Notes","links":["layout"],"tags":["component"],"content":"Quartz can generate a list of recent notes for based on some filtering and sorting criteria. Though this component isn’t included in any layout by default, you can add it by using Component.RecentNotes.\nCustomization §\n\nChanging the title from “Recent notes”: pass in an additional parameter to Component.RecentNotes({ title: &quot;Recent writing&quot; })\nChanging the number of recent notes: pass in an additional parameter to Component.RecentNotes({ limit: 5 })\nShow a ‘see more’ link: pass in an additional parameter to Component.RecentNotes({ linkToMore: &quot;tags/components&quot; }). This field should be a full slug to a page that exists.\nCustomize filtering: pass in an additional parameter to Component.RecentNotes({ filter: someFilterFunction }). The filter function should be a function that has the signature (f: QuartzPluginData) =&gt; boolean.\nCustomize sorting: pass in an additional parameter to Component.RecentNotes({ sort: someSortFunction }). By default, Quartz will sort by date and then tie break lexographically. The sort function should be a function that has the signature (f1: QuartzPluginData, f2: QuartzPluginData) =&gt; number. See byDateAndAlphabetical in quartz/components/PageList.tsx for an example.\nComponent: quartz/components/RecentNotes.tsx\nStyle: quartz/components/styles/recentNotes.scss\n"},"features/syntax-highlighting":{"title":"Syntax Highlighting","links":[],"tags":["plugin/transformer"],"content":"Syntax highlighting in Quartz is completely done at build-time. This means that Quartz only ships pre-calculated CSS to highlight the right words so there is no heavy client-side bundle that does the syntax highlighting.\nAnd, unlike some client-side highlighters, it has a full TextMate parser grammar instead of using Regexes, allowing for highly accurate code highlighting.\nIn short, it generates HTML that looks exactly like your code in an editor like VS Code. Under the hood, it’s powered by Rehype Pretty Code which uses Shiki.\n\n\n                  \n                  Warning \n                  \n                \nSyntax highlighting does have an impact on build speed if you have a lot of code snippets in your notes.\n\nFormatting §\nText inside backticks on a line will be formatted like code.\n```ts\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n\n  return cleanPath + anchor\n}\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nTitles §\nAdd a file title to your code block, with text inside double quotes (&quot;&quot;):\n```js title=&quot;...&quot;\n\n```\n\nquartz/path.tsexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nLine highlighting §\nPlace a numeric range inside {}.\n```js {1-3,4}\n\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nWord highlighting §\nA series of characters, like a literal regex.\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState(&#039;Taylor&#039;);\n```\n\nconst [age, setAge] = useState(50)\nconst [name, setName] = useState(&quot;Taylor&quot;)\nLine numbers §\nSyntax highlighting has line numbers configured automatically. If you want to start line numbers at a specific number, use showLineNumbers{number}:\n```js showLineNumbers{number}\n\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nEscaping code blocks §\nYou can format a codeblock inside of a codeblock by wrapping it with another level of backtick fences that has one more backtick than the previous fence.\n````\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState(&#039;Taylor&#039;);\n```\n````\n\nCustomization §\n\nRemoving syntax highlighting: delete all usages of Plugin.SyntaxHighlighting() from quartz.config.ts.\nStyle: By default, Quartz uses derivatives of the GitHub light and dark themes. You can customize the colours in the quartz/styles/syntax.scss file.\nPlugin: quartz/plugins/transformers/syntax.ts\n"},"features/table-of-contents":{"title":"Table of Contents","links":[],"tags":["component","plugin/transformer"],"content":"Quartz can automatically generate a table of contents from a list of headings on each page. It will also show you your current scroll position on the site by marking headings you’ve scrolled through with a different colour.\nBy default, it will show all headers from H1 (# Title) all the way to H3 (### Title) and will only show the table of contents if there is more than 1 header on the page.\nYou can also hide the table of contents on a page by adding showToc: false to the frontmatter for that page.\n\n\n                  \n                  Info \n                  \n                \nThis feature requires both Plugin.TableOfContents in your quartz.config.ts and Component.TableOfContents in your quartz.layout.ts to function correctly.\n\nCustomization §\n\nRemoving table of contents: remove all instances of Plugin.TableOfContents() from quartz.config.ts. and Component.TableOfContents() from quartz.layout.ts\nChanging the max depth: pass in a parameter to Plugin.TableOfContents({ maxDepth: 4 })\nChanging the minimum number of entries in the Table of Contents before it renders: pass in a parameter to Plugin.TableOfContents({ minEntries: 3 })\nComponent: quartz/components/TableOfContents.tsx\nStyle:\n\nModern (default): quartz/components/styles/toc.scss\nLegacy Quartz 3 style: quartz/components/styles/legacyToc.scss\n\n\nScript: quartz/components/scripts/toc.inline.ts\n"},"features/wikilinks":{"title":"Wikilinks","links":["features/Obsidian-compatibility"],"tags":[],"content":"Wikilinks were pioneered by earlier internet wikis to make it easier to write links across pages without needing to write Markdown or HTML links each time.\nQuartz supports Wikilinks by default and these links are resolved by Quartz using Plugin.CrawlLinks. See the Obsidian Help page on Internal Links for more information on Wikilink syntax.\nThis is enabled as a part of Obsidian compatibility and can be configured and enabled/disabled from that plugin.\nSyntax §\n\n[[Path to file]]: produces a link to Path to file.md (or Path-to-file.md) with the text Path to file\n[[Path to file | Here&#039;s the title override]]: produces a link to Path to file.md with the text Here&#039;s the title override\n[[Path to file#anchor|Anchor]]: produces a link to the anchor Anchor in the file Path to file.md\n[[Path to file#block-ref|^block-ref]]: produces a link to the specific block block-ref in the file Path to file.md\n"},"hosting":{"title":"Hosting","links":["features/RSS-Feed","configuration"],"tags":[],"content":"Quartz effectively turns your Markdown files and other resources into a bundle of HTML, JS, and CSS files (a website!).\nHowever, if you’d like to publish your site to the world, you need a way to host it online. This guide will detail how to deploy with either GitHub Pages or Cloudflare pages but any service that allows you to deploy static HTML should work as well (e.g. Netlify, Replit, etc.)\n\n\n                  \n                  Tip \n                  \n                \nSome Quartz features (like RSS Feed and sitemap generation) require baseUrl to be configured properly in your configuration to work properly. Make sure you set this before deploying!\n\nCloudflare Pages §\n\nLog in to the Cloudflare dashboard and select your account.\nIn Account Home, select Workers &amp; Pages &gt; Create application &gt; Pages &gt; Connect to Git.\nSelect the new GitHub repository that you created and, in the Set up builds and deployments section, provide the following information:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguration optionValueProduction branchv4Framework presetNoneBuild commandnpx quartz buildBuild output directorypublic\nPress “Save and deploy” and Cloudflare should have a deployed version of your site in about a minute. Then, every time you sync your Quartz changes to GitHub, your site should be updated.\nTo add a custom domain, check out Cloudflare’s documentation.\nGitHub Pages §\nLike Quartz 3, you can deploy the site generated by Quartz 4 via GitHub Pages.\n\n\n                  \n                  Warning \n                  \n                \nQuartz generates files in the format of file.html instead of file/index.html which means the trailing slashes for non-folder paths are dropped. As GitHub pages does not do this redirect, this may cause existing links to your site that use trailing slashes to break. If not breaking existing links is important to you, consider using Cloudflare Pages.\n\nIn your local Quartz, create a new file quartz/.github/workflows/deploy.yml.\nquartz/.github/workflows/deploy.ymlname: Deploy Quartz site to GitHub Pages\n \non:\n  push:\n    branches:\n      - v4\n \npermissions:\n  contents: read\n  pages: write\n  id-token: write\n \nconcurrency:\n  group: &quot;pages&quot;\n  cancel-in-progress: false\n \njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0 # Fetch all history for git info\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18.14\n      - name: Install Dependencies\n        run: npm ci\n      - name: Build Quartz\n        run: npx quartz build\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: public\n \n  deploy:\n    needs: build\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\nThen:\n\nHead to “Settings” tab of your forked repository and in the sidebar, click “Pages”. Under “Source”, select “GitHub Actions”.\nCommit these changes by doing npx quartz sync. This should deploy your site to &lt;github-username&gt;.github.io/&lt;repository-name&gt;.\n\n\n\n                  \n                  Tip \n                  \n                \nIf you get an error about not being allowed to deploy to github-pages due to environment protection rules, make sure you remove any existing GitHub pages environments.\nYou can do this by going to your Settings page on your GitHub fork and going to the Environments tab and pressing the trash icon. The GitHub action will recreate the environment for you correctly the next time you sync your Quartz.\n\nCustom Domain §\nHere’s how to add a custom domain to your GitHub pages deployment.\n\nHead to the “Settings” tab of your forked repository.\nIn the “Code and automation” section of the sidebar, click “Pages”.\nUnder “Custom Domain”, type your custom domain and click “Save”.\nThis next step depends on whether you are using an apex domain (example.com) or a subdomain (subdomain.example.com).\n\nIf you are using an apex domain, navigate to your DNS provider and create an A record that points your apex domain to GitHub’s name servers which have the following IP addresses:\n\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n\n\nIf you are using a subdomain, navigate to your DNS provider and create a CNAME record that points your subdomain to the default domain for your site. For example, if you want to use the subdomain quartz.example.com for your user site, create a CNAME record that points quartz.example.com to &lt;github-username&gt;.github.io.\n\n\n\nThe above shows a screenshot of Google Domains configured for both jzhao.xyz (an apex domain) and quartz.jzhao.xyz (a subdomain).\nSee the GitHub documentation for more detail about how to setup your own custom domain with GitHub Pages.\n\n\n                  \n                  Why aren&#039;t my changes showing up? \n                  \n                \nThere could be many different reasons why your changes aren’t showing up but the most likely reason is that you forgot to push your changes to GitHub.\nMake sure you save your changes to Git and sync it to GitHub by doing npx quartz sync. This will also make sure to pull any updates you may have made from other devices so you have them locally.\n\nVercel §\nFix URLs §\nBefore deploying to Vercel, a vercel.json file is required at the root of the project directory. It needs to contain the following configuration so that URLs don’t require the .html extension:\nvercel.json{\n  &quot;cleanUrls&quot;: true\n}\nDeploy to Vercel §\n\nLog in to the Vercel Dashboard and click “Add New…” &gt; Project\nImport the Git repository containing your Quartz project.\nGive the project a name (lowercase characters and hyphens only)\nCheck that these configuration options are set:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguration optionValueFramework PresetOtherRoot Directory./Build and Output Settings &gt; Build Commandnpx quartz build\n\nPress Deploy. Once it’s live, you’ll have 2 *.vercel.app URLs to view the page.\n\nCustom Domain §\n\n\n                  \n                  Note \n                  \n                \nIf there is something already hosted on the domain, these steps will not work without replacing the previous content. As a workaround, you could use Next.js rewrites or use the next section to create a subdomain.\n\n\nUpdate the baseUrl in quartz.config.js if necessary.\nGo to the Domains - Dashboard page in Vercel.\nConnect the domain to Vercel\nPress “Add” to connect a custom domain to Vercel.\nSelect your Quartz repository and press Continue.\nEnter the domain you want to connect it to.\nFollow the instructions to update your DNS records until you see “Valid Configuration”\n\nUse a Subdomain §\nUsing docs.example.com is an example of a subdomain. They’re a simple way of connecting multiple deployments to one domain.\n\nUpdate the baseUrl in quartz.config.js if necessary.\nEnsure your domain has been added to the Domains - Dashboard page in Vercel.\nGo to the Vercel Dashboard and select your Quartz project.\nGo to the Settings tab and then click Domains in the sidebar\nEnter your subdomain into the field and press Add\n"},"index":{"title":"Welcome to Quartz 4","links":["showcase","authoring-content","configuration","layout","build","hosting","migrating-from-Quartz-3","features/Obsidian-compatibility","features/full-text-search","features/graph-view","features/wikilinks","features/backlinks","features/Latex","features/syntax-highlighting","features/popover-previews","features","advanced/creating-components","features/SPA-Routing","advanced/making-plugins","philosophy","advanced/architecture","upgrading"],"tags":[],"content":"Quartz is a fast, batteries-included static-site generator that transforms Markdown content into fully functional websites. Thousands of students, developers, and teachers are already using Quartz to publish personal notes, wikis, and digital gardens to the web.\n🪴 Get Started §\nQuartz requires at least Node v18.14 to function correctly. Ensure you have this installed on your machine before continuing.\nThen, in your terminal of choice, enter the following commands line by line:\ngit clone https://github.com/jackyzha0/quartz.git\ncd quartz\nnpm i\nnpx quartz create\nThis will guide you through initializing your Quartz with content. Once you’ve done so, see how to:\n\nAuthor content in Quartz\nConfigure Quartz’s behaviour\nChange Quartz’s layout\nBuild and preview Quartz\nHost Quartz online\n\n\n\n                  \n                  Info \n                  \n                \nComing from Quartz 3? See the migration guide for the differences between Quartz 3 and Quartz 4 and how to migrate.\n\n🔧 Features §\n\nObsidian compatibility, full-text search, graph view, note transclusion, wikilinks, backlinks, Latex, syntax highlighting, popover previews, and many more right out of the box\nHot-reload for both configuration and content\nSimple JSX layouts and page components\nRidiculously fast page loads and tiny bundle sizes\nFully-customizable parsing, filtering, and page generation through plugins\n\nFor a comprehensive list of features, visit the features page. You can read more about the why behind these features on the philosophy page and a technical overview on the architecture page.\n🚧 Troubleshooting + Updating §\nHaving trouble with Quartz? Try searching for your issue using the search feature. If you haven’t already, upgrade to the newest version of Quartz to see if this fixes your issue.\nIf you’re still having trouble, feel free to submit an issue if you feel you found a bug or ask for help in our Discord Community."},"layout":{"title":"Layout","links":["tags/component","advanced/creating-components","configuration"],"tags":[],"content":"Certain emitters may also output HTML files. To enable easy customization, these emitters allow you to fully rearrange the layout of the page. The default page layouts can be found in quartz.layout.ts.\nEach page is composed of multiple different sections which contain QuartzComponents. The following code snippet lists all of the valid sections that you can add components to:\nquartz/cfg.tsexport interface FullPageLayout {\n  head: QuartzComponent // single component\n  header: QuartzComponent[] // laid out horizontally\n  beforeBody: QuartzComponent[] // laid out vertically\n  pageBody: QuartzComponent // single component\n  left: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  right: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  footer: QuartzComponent // single component\n}\nThese correspond to following parts of the page:\n\n\n\n                  \n                  Note \n                  \n                \nThere are two additional layout fields that are not shown in the above diagram.\n\nhead is a single component that renders the &lt;head&gt; tag in the HTML. This doesn’t appear visually on the page and is only is responsible for metadata about the document like the tab title, scripts, and styles.\nheader is a set of components that are laid out horizontally and appears before the beforeBody section. This enables you to replicate the old Quartz 3 header bar where the title, search bar, and dark mode toggle. By default, Quartz 4 doesn’t place any components in the header.\n\n\nQuartz components, like plugins, can take in additional properties as configuration options. If you’re familiar with React terminology, you can think of them as Higher-order Components.\nSee a list of all the components for all available components along with their configuration options. You can also checkout the guide on creating components if you’re interested in further customizing the behaviour of Quartz.\nStyle §\nMost meaningful style changes like colour scheme and font can be done simply through the general configuration options. However, if you’d like to make more involved style changes, you can do this by writing your own styles. Quartz 4, like Quartz 3, uses Sass for styling.\nYou can see the base style sheet in quartz/styles/base.scss and write your own in quartz/styles/custom.scss.\n\n\n                  \n                  Note \n                  \n                \nSome components may provide their own styling as well! For example, quartz/components/Darkmode.tsx imports styles from quartz/components/styles/darkmode.scss. If you’d like to customize styling for a specific component, double check the component definition to see how its styles are defined.\n"},"migrating-from-Quartz-3":{"title":"Migrating from Quartz 3","links":["configuration","hosting","features/folder-and-tag-listings","advanced/creating-components"],"tags":[],"content":"As you already have Quartz locally, you don’t need to fork or clone it again. Simply just checkout the alpha branch, install the dependencies, and import your old vault.\ngit fetch\ngit checkout v4\ngit pull upstream v4\nnpm i\nnpx quartz create\nIf you get an error like fatal: &#039;upstream&#039; does not appear to be a git repository, make sure you add upstream as a remote origin:\ngit remote add upstream https://github.com/jackyzha0/quartz.git\nWhen running npx quartz create, you will be prompted as to how to initialize your content folder. Here, you can choose to import or link your previous content folder and Quartz should work just as you expect it to.\n\n\n                  \n                  Note \n                  \n                \nIf the existing content folder you’d like to use is at the same path on a different branch, clone the repo again somewhere at a different path in order to use it.\n\nKey changes §\n\nRemoving Hugo and hugo-obsidian: Hugo worked well for earlier versions of Quartz but it also made it hard for people outside of the Golang and Hugo communities to fully understand what Quartz was doing under the hood and be able to properly customize it to their needs. Quartz 4 now uses a Node-based static-site generation process which should lead to a much more helpful error messages and an overall smoother user experience.\nFull-hot reload: The many rough edges of how hugo-obsidian integrated with Hugo meant that watch mode didn’t re-trigger hugo-obsidian to update the content index. This lead to a lot of weird cases where the watch mode output wasn’t accurate. Quartz 4 now uses a cohesive parse, filter, and emit pipeline which gets run on every change so hot-reloads are always accurate.\nReplacing Go template syntax with JSX: Quartz 3 used Go templates to create layouts for pages. However, the syntax isn’t great for doing any sort of complex rendering (like text processing) and it got very difficult to make any meaningful layout changes to Quartz 3. Quartz 4 uses an extension of JavaScript syntax called JSX which allows you to write layout code that looks like HTML in JavaScript which is significantly easier to understand and maintain.\nA new extensible configuration and plugin system: Quartz 3 was hard to configure without technical knowledge of how Hugo’s partials worked. Extensions were even hard to make. Quartz 4’s configuration and plugin system is designed to be extended by users while making updating to new versions of Quartz easy.\n\nThings to update §\n\nYou will need to update your deploy scripts. See the hosting guide for more details.\nEnsure that your default branch on GitHub is updated from hugo to v4.\nFolder and tag listings have also changed.\n\nFolder descriptions should go under content/&lt;folder-name&gt;/index.md where &lt;folder-name&gt; is the name of the folder.\nTag descriptions should go under content/tags/&lt;tag-name&gt;.md where &lt;tag-name&gt; is the name of the tag.\n\n\nSome HTML layout may not be the same between Quartz 3 and Quartz 4. If you depended on a particular HTML hierarchy or class names, you may need to update your custom CSS to reflect these changes.\nIf you customized the layout of Quartz 3, you may need to translate these changes from Go templates back to JSX as Quartz 4 no longer uses Hugo. For components, check out the guide on creating components for more details on this.\n"},"philosophy":{"title":"Philosophy of Quartz","links":[],"tags":[],"content":"A garden should be a true hypertext §\n\nThe garden is the web as topology. Every walk through the garden creates new paths, new meanings, and when we add things to the garden we add them in a way that allows many future, unpredicted relationships.\n(The Garden and the Stream)\n\nThe problem with the file cabinet is that it focuses on efficiency of access and interoperability rather than generativity and creativity. Thinking is not linear, nor is it hierarchical. In fact, not many things are linear or hierarchical at all. Then why is it that most tools and thinking strategies assume a nice chronological or hierarchical order for my thought processes? The ideal tool for thought for me would embrace the messiness of my mind, and organically help insights emerge from chaos instead of forcing an artificial order. A rhizomatic, not arboresecent, form of note taking.\nMy goal with a digital garden is not purely as an organizing system and information store (though it works nicely for that). I want my digital garden to be a playground for new ways ideas can connect together. As a result, existing formal organizing systems like Zettelkasten or the hierarchical folder structures of Notion don’t work well for me. There is way too much upfront friction that by the time I’ve thought about how to organize my thought into folders categories, I’ve lost it.\nQuartz embraces the inherent rhizomatic and web-like nature of our thinking and tries to encourage note-taking in a similar form.\n\nA garden should be shared §\nThe goal of digital gardening should be to tap into your network’s collective intelligence to create constructive feedback loops. If done well, I have a shareable representation of my thoughts that I can send out into the world and people can respond. Even for my most half-baked thoughts, this helps me create a feedback cycle to strengthen and fully flesh out that idea.\nQuartz is designed first and foremost as a tool for publishing digital gardens to the web. To me, digital gardening is not just passive knowledge collection. It’s a form of expression and sharing.\n\n“[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.”\n— Richard Hamming\n\nThe goal of Quartz is to make sharing your digital garden free and simple. At its core, Quartz is designed to be easy to use enough for non-technical people to get going but also powerful enough that senior developers can tweak it to work how they’d like it to work."},"showcase":{"title":"Quartz Showcase","links":[],"tags":[],"content":"Want to see what Quartz can do? Here are some cool community gardens:\n\nQuartz Documentation (this site!)\nJacky Zhao’s Garden\nBrandon Boswell’s Garden\nScaling Synthesis - A hypertext research notebook\nAWAGMI Intern Notes\nCourse notes for Information Technology Advanced Theory\nData Dictionary 🧠\nsspaeti.com’s Second Brain\noldwinter の数字花园\nAbhijeet’s Math Wiki\nMike’s AI Garden 🤖🪴\nMatt Dunn’s Second Brain\nPelayo Arbues’ Notes\nVince Imbat’s Talahardin\n\nIf you want to see your own on here, submit a Pull Request adding yourself to this file!"},"tags/component":{"title":"Components","links":["advanced/creating-components"],"tags":[],"content":"Want to create your own custom component? Check out the advanced guide on creating components for more information."},"upgrading":{"title":"Upgrading Quartz","links":["migrating-from-Quartz-3"],"tags":[],"content":"\n\n                  \n                  Note \n                  \n                \nThis is specifically a guide for upgrading Quartz 4 version to a more recent update. If you are coming from Quartz 3, check out the migration guide for more info.\n\nTo fetch the latest Quartz updates, simply run\nnpx quartz update\nAs Quartz uses git under the hood for versioning, updating effectively ‘pulls’ in the updates from the official Quartz GitHub repository. If you have local changes that might conflict with the updates, you may need to resolve these manually yourself (or, pull manually using git pull origin upstream).\n\n\n                  \n                  Tip \n                  \n                \nQuartz will try to cache your content before updating to try and prevent merge conflicts. If you get a conflict mid-merge, you can stop the merge and then run npx quartz restore to restore your content from the cache.\n\nIf you have the GitHub desktop app, this will automatically open to help you resolve the conflicts. Otherwise, you will need to resolve this in a text editor like VSCode. For more help on resolving conflicts manually, check out the GitHub guide on resolving merge conflicts."}}